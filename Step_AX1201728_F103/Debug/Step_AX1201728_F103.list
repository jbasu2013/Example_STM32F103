
Step_AX1201728_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000af8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000c04  08000c04  00010c04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c28  08000c28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c28  08000c28  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c28  08000c28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c28  08000c28  00010c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c2c  08000c2c  00010c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000c3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000c3c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000436b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011d5  00000000  00000000  000243a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001142  00000000  00000000  00025575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000340  00000000  00000000  000266b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000520  00000000  00000000  000269f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000165a4  00000000  00000000  00026f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004cf9  00000000  00000000  0003d4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fe6b  00000000  00000000  000421b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c2020  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006d8  00000000  00000000  000c2074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000bec 	.word	0x08000bec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000bec 	.word	0x08000bec

0800014c <step>:
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
}

__STATIC_INLINE void delay_us(uint32_t us)
{
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
 800014c:	4b10      	ldr	r3, [pc, #64]	; (8000190 <step+0x44>)
 800014e:	4a11      	ldr	r2, [pc, #68]	; (8000194 <step+0x48>)
 8000150:	681b      	ldr	r3, [r3, #0]
 8000152:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000156:	fbb3 f3f2 	udiv	r3, r3, r2
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void step(int16_t step)
{
 800015a:	b5f0      	push	{r4, r5, r6, r7, lr}
	while(step)
	{
		STEP_A_HIGH;
 800015c:	f44f 4680 	mov.w	r6, #16384	; 0x4000
	DWT->CYCCNT = 0U;
 8000160:	2500      	movs	r5, #0
		delay_us(500);
		STEP_A_LOW;
 8000162:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
		STEP_A_HIGH;
 8000166:	4c0c      	ldr	r4, [pc, #48]	; (8000198 <step+0x4c>)
 8000168:	4a0c      	ldr	r2, [pc, #48]	; (800019c <step+0x50>)
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
 800016a:	4359      	muls	r1, r3
 800016c:	005b      	lsls	r3, r3, #1
	while(step)
 800016e:	b900      	cbnz	r0, 8000172 <step+0x26>
		delay_us(2);
		step--;
	}
}
 8000170:	bdf0      	pop	{r4, r5, r6, r7, pc}
		STEP_A_HIGH;
 8000172:	6126      	str	r6, [r4, #16]
	DWT->CYCCNT = 0U;
 8000174:	6055      	str	r5, [r2, #4]
	while(DWT->CYCCNT < us_count_tic);
 8000176:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800017a:	4561      	cmp	r1, ip
 800017c:	d8fb      	bhi.n	8000176 <step+0x2a>
		STEP_A_LOW;
 800017e:	6127      	str	r7, [r4, #16]
	DWT->CYCCNT = 0U;
 8000180:	6055      	str	r5, [r2, #4]
	while(DWT->CYCCNT < us_count_tic);
 8000182:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8000186:	4563      	cmp	r3, ip
 8000188:	d8fb      	bhi.n	8000182 <step+0x36>
		step--;
 800018a:	3801      	subs	r0, #1
 800018c:	b200      	sxth	r0, r0
 800018e:	e7ee      	b.n	800016e <step+0x22>
 8000190:	20000000 	.word	0x20000000
 8000194:	000f4240 	.word	0x000f4240
 8000198:	40010c00 	.word	0x40010c00
 800019c:	e0001000 	.word	0xe0001000

080001a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a0:	b510      	push	{r4, lr}
 80001a2:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a4:	2210      	movs	r2, #16
 80001a6:	2100      	movs	r1, #0
 80001a8:	a809      	add	r0, sp, #36	; 0x24
 80001aa:	f000 fd17 	bl	8000bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ae:	2214      	movs	r2, #20
 80001b0:	2100      	movs	r1, #0
 80001b2:	a801      	add	r0, sp, #4
 80001b4:	f000 fd12 	bl	8000bdc <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b8:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001be:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c0:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c6:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ce:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d0:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d6:	f000 fa6b 	bl	80006b0 <HAL_RCC_OscConfig>
 80001da:	b108      	cbz	r0, 80001e0 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001de:	e7fe      	b.n	80001de <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ea:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ec:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f0:	4621      	mov	r1, r4
 80001f2:	a801      	add	r0, sp, #4
 80001f4:	f000 fc32 	bl	8000a5c <HAL_RCC_ClockConfig>
 80001f8:	b108      	cbz	r0, 80001fe <SystemClock_Config+0x5e>
 80001fa:	b672      	cpsid	i
  while (1)
 80001fc:	e7fe      	b.n	80001fc <SystemClock_Config+0x5c>
}
 80001fe:	b010      	add	sp, #64	; 0x40
 8000200:	bd10      	pop	{r4, pc}
	...

08000204 <main>:
{
 8000204:	b500      	push	{lr}
 8000206:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000208:	f000 f8ec 	bl	80003e4 <HAL_Init>
  SystemClock_Config();
 800020c:	f7ff ffc8 	bl	80001a0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000210:	2210      	movs	r2, #16
 8000212:	2100      	movs	r1, #0
 8000214:	eb0d 0002 	add.w	r0, sp, r2
 8000218:	f000 fce0 	bl	8000bdc <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800021c:	4b2e      	ldr	r3, [pc, #184]	; (80002d8 <main+0xd4>)
  HAL_GPIO_WritePin(GPIOB, RESET_AX_Pin|DIR_CW_CCW_A_Pin|STEP_fscx_A_Pin, GPIO_PIN_RESET);
 800021e:	4c2f      	ldr	r4, [pc, #188]	; (80002dc <main+0xd8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000220:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, RESET_AX_Pin|DIR_CW_CCW_A_Pin|STEP_fscx_A_Pin, GPIO_PIN_RESET);
 8000222:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000226:	f042 0220 	orr.w	r2, r2, #32
 800022a:	619a      	str	r2, [r3, #24]
 800022c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, RESET_AX_Pin|DIR_CW_CCW_A_Pin|STEP_fscx_A_Pin, GPIO_PIN_RESET);
 800022e:	4620      	mov	r0, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000230:	f002 0220 	and.w	r2, r2, #32
 8000234:	9201      	str	r2, [sp, #4]
 8000236:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000238:	699a      	ldr	r2, [r3, #24]
  DIR_RIGHT_A;
 800023a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800023e:	f042 0208 	orr.w	r2, r2, #8
 8000242:	619a      	str	r2, [r3, #24]
 8000244:	699a      	ldr	r2, [r3, #24]
 8000246:	f002 0208 	and.w	r2, r2, #8
 800024a:	9202      	str	r2, [sp, #8]
 800024c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024e:	699a      	ldr	r2, [r3, #24]
 8000250:	f042 0204 	orr.w	r2, r2, #4
 8000254:	619a      	str	r2, [r3, #24]
 8000256:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, RESET_AX_Pin|DIR_CW_CCW_A_Pin|STEP_fscx_A_Pin, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025a:	f003 0304 	and.w	r3, r3, #4
 800025e:	9303      	str	r3, [sp, #12]
 8000260:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, RESET_AX_Pin|DIR_CW_CCW_A_Pin|STEP_fscx_A_Pin, GPIO_PIN_RESET);
 8000262:	f000 fa1f 	bl	80006a4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000266:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800026a:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800026c:	2100      	movs	r1, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800026e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000272:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000274:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000276:	e9cd 1306 	strd	r1, r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800027a:	a904      	add	r1, sp, #16
 800027c:	f000 f936 	bl	80004ec <HAL_GPIO_Init>
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000280:	4a17      	ldr	r2, [pc, #92]	; (80002e0 <main+0xdc>)
  HAL_Delay(2);
 8000282:	2002      	movs	r0, #2
 8000284:	68d3      	ldr	r3, [r2, #12]
 8000286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800028a:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 800028c:	4a15      	ldr	r2, [pc, #84]	; (80002e4 <main+0xe0>)
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6013      	str	r3, [r2, #0]
  RESET_AX_LOW;
 8000296:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800029a:	6123      	str	r3, [r4, #16]
  STEP_A_LOW;
 800029c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a0:	6123      	str	r3, [r4, #16]
  DIR_RIGHT_A;
 80002a2:	6125      	str	r5, [r4, #16]
  HAL_Delay(2);
 80002a4:	f000 f8b6 	bl	8000414 <HAL_Delay>
  RESET_AX_HIGH;
 80002a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002ac:	6123      	str	r3, [r4, #16]
	  step(ROTATE);
 80002ae:	f640 60c4 	movw	r0, #3780	; 0xec4
	  DIR_RIGHT_A;
 80002b2:	6125      	str	r5, [r4, #16]
	  step(ROTATE);
 80002b4:	f7ff ff4a 	bl	800014c <step>
	  HAL_Delay(500);
 80002b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002bc:	f000 f8aa 	bl	8000414 <HAL_Delay>
	  DIR_LEFT_A;
 80002c0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	  step(ROTATE);
 80002c4:	f640 60c4 	movw	r0, #3780	; 0xec4
	  DIR_LEFT_A;
 80002c8:	6123      	str	r3, [r4, #16]
	  step(ROTATE);
 80002ca:	f7ff ff3f 	bl	800014c <step>
	  HAL_Delay(500);
 80002ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d2:	f000 f89f 	bl	8000414 <HAL_Delay>
  while(1)
 80002d6:	e7ea      	b.n	80002ae <main+0xaa>
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40010c00 	.word	0x40010c00
 80002e0:	e000edf0 	.word	0xe000edf0
 80002e4:	e0001000 	.word	0xe0001000

080002e8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <HAL_MspInit+0x3c>)
{
 80002ea:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ec:	699a      	ldr	r2, [r3, #24]
 80002ee:	f042 0201 	orr.w	r2, r2, #1
 80002f2:	619a      	str	r2, [r3, #24]
 80002f4:	699a      	ldr	r2, [r3, #24]
 80002f6:	f002 0201 	and.w	r2, r2, #1
 80002fa:	9200      	str	r2, [sp, #0]
 80002fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002fe:	69da      	ldr	r2, [r3, #28]
 8000300:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000304:	61da      	str	r2, [r3, #28]
 8000306:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000308:	4a07      	ldr	r2, [pc, #28]	; (8000328 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800030a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800030e:	9301      	str	r3, [sp, #4]
 8000310:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000312:	6853      	ldr	r3, [r2, #4]
 8000314:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000318:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800031c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800031e:	b002      	add	sp, #8
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000
 8000328:	40010000 	.word	0x40010000

0800032c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800032c:	e7fe      	b.n	800032c <NMI_Handler>

0800032e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800032e:	e7fe      	b.n	800032e <HardFault_Handler>

08000330 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000330:	e7fe      	b.n	8000330 <MemManage_Handler>

08000332 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000332:	e7fe      	b.n	8000332 <BusFault_Handler>

08000334 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000334:	e7fe      	b.n	8000334 <UsageFault_Handler>

08000336 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000336:	4770      	bx	lr

08000338 <DebugMon_Handler>:
 8000338:	4770      	bx	lr

0800033a <PendSV_Handler>:
 800033a:	4770      	bx	lr

0800033c <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//count_error++;
	uwTick++;
 800033c:	4a02      	ldr	r2, [pc, #8]	; (8000348 <SysTick_Handler+0xc>)
 800033e:	6813      	ldr	r3, [r2, #0]
 8000340:	3301      	adds	r3, #1
 8000342:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	20000028 	.word	0x20000028

0800034c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800034c:	4770      	bx	lr
	...

08000350 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000350:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000352:	e003      	b.n	800035c <LoopCopyDataInit>

08000354 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000354:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000356:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000358:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800035a:	3104      	adds	r1, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800035c:	480a      	ldr	r0, [pc, #40]	; (8000388 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000360:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000362:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000364:	d3f6      	bcc.n	8000354 <CopyDataInit>
  ldr r2, =_sbss
 8000366:	4a0a      	ldr	r2, [pc, #40]	; (8000390 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000368:	e002      	b.n	8000370 <LoopFillZerobss>

0800036a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800036c:	f842 3b04 	str.w	r3, [r2], #4

08000370 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000372:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000374:	d3f9      	bcc.n	800036a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000376:	f7ff ffe9 	bl	800034c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800037a:	f000 fc0b 	bl	8000b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037e:	f7ff ff41 	bl	8000204 <main>
  bx lr
 8000382:	4770      	bx	lr
  ldr r3, =_sidata
 8000384:	08000c30 	.word	0x08000c30
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800038c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000390:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000394:	2000002c 	.word	0x2000002c

08000398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC1_2_IRQHandler>
	...

0800039c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800039c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <HAL_InitTick+0x3c>)
{
 80003a0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003a2:	7818      	ldrb	r0, [r3, #0]
 80003a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003a8:	fbb3 f3f0 	udiv	r3, r3, r0
 80003ac:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <HAL_InitTick+0x40>)
 80003ae:	6810      	ldr	r0, [r2, #0]
 80003b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80003b4:	f000 f884 	bl	80004c0 <HAL_SYSTICK_Config>
 80003b8:	4604      	mov	r4, r0
 80003ba:	b958      	cbnz	r0, 80003d4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003bc:	2d0f      	cmp	r5, #15
 80003be:	d809      	bhi.n	80003d4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003c0:	4602      	mov	r2, r0
 80003c2:	4629      	mov	r1, r5
 80003c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003c8:	f000 f848 	bl	800045c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003cc:	4620      	mov	r0, r4
 80003ce:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <HAL_InitTick+0x44>)
 80003d0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80003d2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80003d4:	2001      	movs	r0, #1
 80003d6:	e7fc      	b.n	80003d2 <HAL_InitTick+0x36>
 80003d8:	20000004 	.word	0x20000004
 80003dc:	20000000 	.word	0x20000000
 80003e0:	20000008 	.word	0x20000008

080003e4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <HAL_Init+0x20>)
{
 80003e6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003e8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003ea:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003ec:	f043 0310 	orr.w	r3, r3, #16
 80003f0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003f2:	f000 f821 	bl	8000438 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80003f6:	200f      	movs	r0, #15
 80003f8:	f7ff ffd0 	bl	800039c <HAL_InitTick>
  HAL_MspInit();
 80003fc:	f7ff ff74 	bl	80002e8 <HAL_MspInit>
}
 8000400:	2000      	movs	r0, #0
 8000402:	bd08      	pop	{r3, pc}
 8000404:	40022000 	.word	0x40022000

08000408 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000408:	4b01      	ldr	r3, [pc, #4]	; (8000410 <HAL_GetTick+0x8>)
 800040a:	6818      	ldr	r0, [r3, #0]
}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	20000028 	.word	0x20000028

08000414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000414:	b538      	push	{r3, r4, r5, lr}
 8000416:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000418:	f7ff fff6 	bl	8000408 <HAL_GetTick>
 800041c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800041e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000420:	bf1e      	ittt	ne
 8000422:	4b04      	ldrne	r3, [pc, #16]	; (8000434 <HAL_Delay+0x20>)
 8000424:	781b      	ldrbne	r3, [r3, #0]
 8000426:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000428:	f7ff ffee 	bl	8000408 <HAL_GetTick>
 800042c:	1b43      	subs	r3, r0, r5
 800042e:	42a3      	cmp	r3, r4
 8000430:	d3fa      	bcc.n	8000428 <HAL_Delay+0x14>
  {
  }
}
 8000432:	bd38      	pop	{r3, r4, r5, pc}
 8000434:	20000004 	.word	0x20000004

08000438 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000438:	4907      	ldr	r1, [pc, #28]	; (8000458 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800043a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800043c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800043e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000442:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000446:	0412      	lsls	r2, r2, #16
 8000448:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800044a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800044c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000454:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000456:	4770      	bx	lr
 8000458:	e000ed00 	.word	0xe000ed00

0800045c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800045c:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	68dc      	ldr	r4, [r3, #12]
 8000462:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000466:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800046a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800046c:	2b04      	cmp	r3, #4
 800046e:	bf28      	it	cs
 8000470:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000472:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000474:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000478:	bf98      	it	ls
 800047a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800047c:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000480:	bf88      	it	hi
 8000482:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000484:	ea21 0303 	bic.w	r3, r1, r3
 8000488:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800048a:	fa05 f404 	lsl.w	r4, r5, r4
 800048e:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000492:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000494:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000498:	bfac      	ite	ge
 800049a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800049e:	4a07      	ldrlt	r2, [pc, #28]	; (80004bc <HAL_NVIC_SetPriority+0x60>)
 80004a0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80004a4:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a6:	bfab      	itete	ge
 80004a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ac:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80004b6:	bd30      	pop	{r4, r5, pc}
 80004b8:	e000ed00 	.word	0xe000ed00
 80004bc:	e000ed14 	.word	0xe000ed14

080004c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004c0:	3801      	subs	r0, #1
 80004c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004c6:	d20a      	bcs.n	80004de <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004cc:	4a06      	ldr	r2, [pc, #24]	; (80004e8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ce:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004d4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004d6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004d8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004dc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004de:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	e000e010 	.word	0xe000e010
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80004f0:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80004f2:	4616      	mov	r6, r2
 80004f4:	4b64      	ldr	r3, [pc, #400]	; (8000688 <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004f6:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8000698 <HAL_GPIO_Init+0x1ac>
 80004fa:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 800069c <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004fe:	680d      	ldr	r5, [r1, #0]
 8000500:	fa35 f406 	lsrs.w	r4, r5, r6
 8000504:	d102      	bne.n	800050c <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000506:	b003      	add	sp, #12
 8000508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800050c:	f04f 0801 	mov.w	r8, #1
 8000510:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000514:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8000518:	ea38 0505 	bics.w	r5, r8, r5
 800051c:	d17c      	bne.n	8000618 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 800051e:	684d      	ldr	r5, [r1, #4]
 8000520:	2d03      	cmp	r5, #3
 8000522:	d807      	bhi.n	8000534 <HAL_GPIO_Init+0x48>
 8000524:	3d01      	subs	r5, #1
 8000526:	2d02      	cmp	r5, #2
 8000528:	f200 8088 	bhi.w	800063c <HAL_GPIO_Init+0x150>
 800052c:	e8df f005 	tbb	[pc, r5]
 8000530:	9b96      	.short	0x9b96
 8000532:	a1          	.byte	0xa1
 8000533:	00          	.byte	0x00
 8000534:	2d12      	cmp	r5, #18
 8000536:	f000 8099 	beq.w	800066c <HAL_GPIO_Init+0x180>
 800053a:	d86f      	bhi.n	800061c <HAL_GPIO_Init+0x130>
 800053c:	2d11      	cmp	r5, #17
 800053e:	f000 808f 	beq.w	8000660 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000542:	2cff      	cmp	r4, #255	; 0xff
 8000544:	bf98      	it	ls
 8000546:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000548:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800054c:	bf88      	it	hi
 800054e:	f100 0a04 	addhi.w	sl, r0, #4
 8000552:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000556:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800055a:	bf88      	it	hi
 800055c:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800055e:	fa09 fb05 	lsl.w	fp, r9, r5
 8000562:	ea28 080b 	bic.w	r8, r8, fp
 8000566:	fa02 f505 	lsl.w	r5, r2, r5
 800056a:	ea48 0505 	orr.w	r5, r8, r5
 800056e:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000572:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000576:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800057a:	d04d      	beq.n	8000618 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800057c:	4f43      	ldr	r7, [pc, #268]	; (800068c <HAL_GPIO_Init+0x1a0>)
 800057e:	f026 0803 	bic.w	r8, r6, #3
 8000582:	69bd      	ldr	r5, [r7, #24]
 8000584:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000588:	f045 0501 	orr.w	r5, r5, #1
 800058c:	61bd      	str	r5, [r7, #24]
 800058e:	69bd      	ldr	r5, [r7, #24]
 8000590:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000594:	f005 0501 	and.w	r5, r5, #1
 8000598:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800059a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800059e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80005a4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005a8:	fa09 f90b 	lsl.w	r9, r9, fp
 80005ac:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005b0:	4d37      	ldr	r5, [pc, #220]	; (8000690 <HAL_GPIO_Init+0x1a4>)
 80005b2:	42a8      	cmp	r0, r5
 80005b4:	d061      	beq.n	800067a <HAL_GPIO_Init+0x18e>
 80005b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005ba:	42a8      	cmp	r0, r5
 80005bc:	d05f      	beq.n	800067e <HAL_GPIO_Init+0x192>
 80005be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005c2:	42a8      	cmp	r0, r5
 80005c4:	d05d      	beq.n	8000682 <HAL_GPIO_Init+0x196>
 80005c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005ca:	42a8      	cmp	r0, r5
 80005cc:	bf0c      	ite	eq
 80005ce:	2503      	moveq	r5, #3
 80005d0:	2504      	movne	r5, #4
 80005d2:	fa05 f50b 	lsl.w	r5, r5, fp
 80005d6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80005da:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80005de:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005e0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80005e4:	bf14      	ite	ne
 80005e6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005e8:	43a5      	biceq	r5, r4
 80005ea:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80005ec:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005ee:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80005f2:	bf14      	ite	ne
 80005f4:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80005f6:	43a5      	biceq	r5, r4
 80005f8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80005fa:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005fc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000600:	bf14      	ite	ne
 8000602:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000604:	43a5      	biceq	r5, r4
 8000606:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000608:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800060a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800060e:	bf14      	ite	ne
 8000610:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000612:	ea25 0404 	biceq.w	r4, r5, r4
 8000616:	60dc      	str	r4, [r3, #12]
	position++;
 8000618:	3601      	adds	r6, #1
 800061a:	e770      	b.n	80004fe <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800061c:	4f1d      	ldr	r7, [pc, #116]	; (8000694 <HAL_GPIO_Init+0x1a8>)
 800061e:	42bd      	cmp	r5, r7
 8000620:	d00c      	beq.n	800063c <HAL_GPIO_Init+0x150>
 8000622:	d817      	bhi.n	8000654 <HAL_GPIO_Init+0x168>
 8000624:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80006a0 <HAL_GPIO_Init+0x1b4>
 8000628:	454d      	cmp	r5, r9
 800062a:	d007      	beq.n	800063c <HAL_GPIO_Init+0x150>
 800062c:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8000630:	454d      	cmp	r5, r9
 8000632:	d003      	beq.n	800063c <HAL_GPIO_Init+0x150>
 8000634:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000638:	454d      	cmp	r5, r9
 800063a:	d182      	bne.n	8000542 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800063c:	688a      	ldr	r2, [r1, #8]
 800063e:	b1d2      	cbz	r2, 8000676 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000640:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000642:	bf08      	it	eq
 8000644:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000648:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800064c:	bf18      	it	ne
 800064e:	f8c0 8014 	strne.w	r8, [r0, #20]
 8000652:	e776      	b.n	8000542 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8000654:	4565      	cmp	r5, ip
 8000656:	d0f1      	beq.n	800063c <HAL_GPIO_Init+0x150>
 8000658:	4575      	cmp	r5, lr
 800065a:	e7ee      	b.n	800063a <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800065c:	68ca      	ldr	r2, [r1, #12]
          break;
 800065e:	e770      	b.n	8000542 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000660:	68ca      	ldr	r2, [r1, #12]
 8000662:	3204      	adds	r2, #4
          break;
 8000664:	e76d      	b.n	8000542 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000666:	68ca      	ldr	r2, [r1, #12]
 8000668:	3208      	adds	r2, #8
          break;
 800066a:	e76a      	b.n	8000542 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800066c:	68ca      	ldr	r2, [r1, #12]
 800066e:	320c      	adds	r2, #12
          break;
 8000670:	e767      	b.n	8000542 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8000672:	2200      	movs	r2, #0
 8000674:	e765      	b.n	8000542 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000676:	2204      	movs	r2, #4
 8000678:	e763      	b.n	8000542 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800067a:	2500      	movs	r5, #0
 800067c:	e7a9      	b.n	80005d2 <HAL_GPIO_Init+0xe6>
 800067e:	2501      	movs	r5, #1
 8000680:	e7a7      	b.n	80005d2 <HAL_GPIO_Init+0xe6>
 8000682:	2502      	movs	r5, #2
 8000684:	e7a5      	b.n	80005d2 <HAL_GPIO_Init+0xe6>
 8000686:	bf00      	nop
 8000688:	40010400 	.word	0x40010400
 800068c:	40021000 	.word	0x40021000
 8000690:	40010800 	.word	0x40010800
 8000694:	10220000 	.word	0x10220000
 8000698:	10310000 	.word	0x10310000
 800069c:	10320000 	.word	0x10320000
 80006a0:	10120000 	.word	0x10120000

080006a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006a4:	b10a      	cbz	r2, 80006aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006a6:	6101      	str	r1, [r0, #16]
  }
}
 80006a8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006aa:	0409      	lsls	r1, r1, #16
 80006ac:	e7fb      	b.n	80006a6 <HAL_GPIO_WritePin+0x2>
	...

080006b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80006b4:	4605      	mov	r5, r0
 80006b6:	b338      	cbz	r0, 8000708 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006b8:	6803      	ldr	r3, [r0, #0]
 80006ba:	07db      	lsls	r3, r3, #31
 80006bc:	d410      	bmi.n	80006e0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80006be:	682b      	ldr	r3, [r5, #0]
 80006c0:	079f      	lsls	r7, r3, #30
 80006c2:	d45e      	bmi.n	8000782 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006c4:	682b      	ldr	r3, [r5, #0]
 80006c6:	0719      	lsls	r1, r3, #28
 80006c8:	f100 8095 	bmi.w	80007f6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006cc:	682b      	ldr	r3, [r5, #0]
 80006ce:	075a      	lsls	r2, r3, #29
 80006d0:	f100 80bf 	bmi.w	8000852 <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80006d4:	69e8      	ldr	r0, [r5, #28]
 80006d6:	2800      	cmp	r0, #0
 80006d8:	f040 812c 	bne.w	8000934 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80006dc:	2000      	movs	r0, #0
 80006de:	e029      	b.n	8000734 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80006e0:	4c8f      	ldr	r4, [pc, #572]	; (8000920 <HAL_RCC_OscConfig+0x270>)
 80006e2:	6863      	ldr	r3, [r4, #4]
 80006e4:	f003 030c 	and.w	r3, r3, #12
 80006e8:	2b04      	cmp	r3, #4
 80006ea:	d007      	beq.n	80006fc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80006ec:	6863      	ldr	r3, [r4, #4]
 80006ee:	f003 030c 	and.w	r3, r3, #12
 80006f2:	2b08      	cmp	r3, #8
 80006f4:	d10a      	bne.n	800070c <HAL_RCC_OscConfig+0x5c>
 80006f6:	6863      	ldr	r3, [r4, #4]
 80006f8:	03de      	lsls	r6, r3, #15
 80006fa:	d507      	bpl.n	800070c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006fc:	6823      	ldr	r3, [r4, #0]
 80006fe:	039c      	lsls	r4, r3, #14
 8000700:	d5dd      	bpl.n	80006be <HAL_RCC_OscConfig+0xe>
 8000702:	686b      	ldr	r3, [r5, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1da      	bne.n	80006be <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000708:	2001      	movs	r0, #1
 800070a:	e013      	b.n	8000734 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800070c:	686b      	ldr	r3, [r5, #4]
 800070e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000712:	d112      	bne.n	800073a <HAL_RCC_OscConfig+0x8a>
 8000714:	6823      	ldr	r3, [r4, #0]
 8000716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800071a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800071c:	f7ff fe74 	bl	8000408 <HAL_GetTick>
 8000720:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	0398      	lsls	r0, r3, #14
 8000726:	d4ca      	bmi.n	80006be <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000728:	f7ff fe6e 	bl	8000408 <HAL_GetTick>
 800072c:	1b80      	subs	r0, r0, r6
 800072e:	2864      	cmp	r0, #100	; 0x64
 8000730:	d9f7      	bls.n	8000722 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8000732:	2003      	movs	r0, #3
}
 8000734:	b002      	add	sp, #8
 8000736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800073a:	b99b      	cbnz	r3, 8000764 <HAL_RCC_OscConfig+0xb4>
 800073c:	6823      	ldr	r3, [r4, #0]
 800073e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000742:	6023      	str	r3, [r4, #0]
 8000744:	6823      	ldr	r3, [r4, #0]
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800074c:	f7ff fe5c 	bl	8000408 <HAL_GetTick>
 8000750:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000752:	6823      	ldr	r3, [r4, #0]
 8000754:	0399      	lsls	r1, r3, #14
 8000756:	d5b2      	bpl.n	80006be <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000758:	f7ff fe56 	bl	8000408 <HAL_GetTick>
 800075c:	1b80      	subs	r0, r0, r6
 800075e:	2864      	cmp	r0, #100	; 0x64
 8000760:	d9f7      	bls.n	8000752 <HAL_RCC_OscConfig+0xa2>
 8000762:	e7e6      	b.n	8000732 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000768:	6823      	ldr	r3, [r4, #0]
 800076a:	d103      	bne.n	8000774 <HAL_RCC_OscConfig+0xc4>
 800076c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000770:	6023      	str	r3, [r4, #0]
 8000772:	e7cf      	b.n	8000714 <HAL_RCC_OscConfig+0x64>
 8000774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000778:	6023      	str	r3, [r4, #0]
 800077a:	6823      	ldr	r3, [r4, #0]
 800077c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000780:	e7cb      	b.n	800071a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000782:	4c67      	ldr	r4, [pc, #412]	; (8000920 <HAL_RCC_OscConfig+0x270>)
 8000784:	6863      	ldr	r3, [r4, #4]
 8000786:	f013 0f0c 	tst.w	r3, #12
 800078a:	d007      	beq.n	800079c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800078c:	6863      	ldr	r3, [r4, #4]
 800078e:	f003 030c 	and.w	r3, r3, #12
 8000792:	2b08      	cmp	r3, #8
 8000794:	d110      	bne.n	80007b8 <HAL_RCC_OscConfig+0x108>
 8000796:	6863      	ldr	r3, [r4, #4]
 8000798:	03da      	lsls	r2, r3, #15
 800079a:	d40d      	bmi.n	80007b8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800079c:	6823      	ldr	r3, [r4, #0]
 800079e:	079b      	lsls	r3, r3, #30
 80007a0:	d502      	bpl.n	80007a8 <HAL_RCC_OscConfig+0xf8>
 80007a2:	692b      	ldr	r3, [r5, #16]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d1af      	bne.n	8000708 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007a8:	6823      	ldr	r3, [r4, #0]
 80007aa:	696a      	ldr	r2, [r5, #20]
 80007ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80007b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80007b4:	6023      	str	r3, [r4, #0]
 80007b6:	e785      	b.n	80006c4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007b8:	692a      	ldr	r2, [r5, #16]
 80007ba:	4b5a      	ldr	r3, [pc, #360]	; (8000924 <HAL_RCC_OscConfig+0x274>)
 80007bc:	b16a      	cbz	r2, 80007da <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007c2:	f7ff fe21 	bl	8000408 <HAL_GetTick>
 80007c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007c8:	6823      	ldr	r3, [r4, #0]
 80007ca:	079f      	lsls	r7, r3, #30
 80007cc:	d4ec      	bmi.n	80007a8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80007ce:	f7ff fe1b 	bl	8000408 <HAL_GetTick>
 80007d2:	1b80      	subs	r0, r0, r6
 80007d4:	2802      	cmp	r0, #2
 80007d6:	d9f7      	bls.n	80007c8 <HAL_RCC_OscConfig+0x118>
 80007d8:	e7ab      	b.n	8000732 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80007da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007dc:	f7ff fe14 	bl	8000408 <HAL_GetTick>
 80007e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	0798      	lsls	r0, r3, #30
 80007e6:	f57f af6d 	bpl.w	80006c4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80007ea:	f7ff fe0d 	bl	8000408 <HAL_GetTick>
 80007ee:	1b80      	subs	r0, r0, r6
 80007f0:	2802      	cmp	r0, #2
 80007f2:	d9f6      	bls.n	80007e2 <HAL_RCC_OscConfig+0x132>
 80007f4:	e79d      	b.n	8000732 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80007f6:	69aa      	ldr	r2, [r5, #24]
 80007f8:	4e49      	ldr	r6, [pc, #292]	; (8000920 <HAL_RCC_OscConfig+0x270>)
 80007fa:	4b4b      	ldr	r3, [pc, #300]	; (8000928 <HAL_RCC_OscConfig+0x278>)
 80007fc:	b1da      	cbz	r2, 8000836 <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000802:	f7ff fe01 	bl	8000408 <HAL_GetTick>
 8000806:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000808:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800080a:	079b      	lsls	r3, r3, #30
 800080c:	d50d      	bpl.n	800082a <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800080e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000812:	4b46      	ldr	r3, [pc, #280]	; (800092c <HAL_RCC_OscConfig+0x27c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	fbb3 f3f2 	udiv	r3, r3, r2
 800081a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800081c:	bf00      	nop
  }
  while (Delay --);
 800081e:	9b01      	ldr	r3, [sp, #4]
 8000820:	1e5a      	subs	r2, r3, #1
 8000822:	9201      	str	r2, [sp, #4]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d1f9      	bne.n	800081c <HAL_RCC_OscConfig+0x16c>
 8000828:	e750      	b.n	80006cc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800082a:	f7ff fded 	bl	8000408 <HAL_GetTick>
 800082e:	1b00      	subs	r0, r0, r4
 8000830:	2802      	cmp	r0, #2
 8000832:	d9e9      	bls.n	8000808 <HAL_RCC_OscConfig+0x158>
 8000834:	e77d      	b.n	8000732 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8000836:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000838:	f7ff fde6 	bl	8000408 <HAL_GetTick>
 800083c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800083e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000840:	079f      	lsls	r7, r3, #30
 8000842:	f57f af43 	bpl.w	80006cc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000846:	f7ff fddf 	bl	8000408 <HAL_GetTick>
 800084a:	1b00      	subs	r0, r0, r4
 800084c:	2802      	cmp	r0, #2
 800084e:	d9f6      	bls.n	800083e <HAL_RCC_OscConfig+0x18e>
 8000850:	e76f      	b.n	8000732 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000852:	4c33      	ldr	r4, [pc, #204]	; (8000920 <HAL_RCC_OscConfig+0x270>)
 8000854:	69e3      	ldr	r3, [r4, #28]
 8000856:	00d8      	lsls	r0, r3, #3
 8000858:	d424      	bmi.n	80008a4 <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 800085a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800085c:	69e3      	ldr	r3, [r4, #28]
 800085e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000862:	61e3      	str	r3, [r4, #28]
 8000864:	69e3      	ldr	r3, [r4, #28]
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800086e:	4e30      	ldr	r6, [pc, #192]	; (8000930 <HAL_RCC_OscConfig+0x280>)
 8000870:	6833      	ldr	r3, [r6, #0]
 8000872:	05d9      	lsls	r1, r3, #23
 8000874:	d518      	bpl.n	80008a8 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000876:	68eb      	ldr	r3, [r5, #12]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d126      	bne.n	80008ca <HAL_RCC_OscConfig+0x21a>
 800087c:	6a23      	ldr	r3, [r4, #32]
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000884:	f7ff fdc0 	bl	8000408 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000888:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800088c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800088e:	6a23      	ldr	r3, [r4, #32]
 8000890:	079b      	lsls	r3, r3, #30
 8000892:	d53f      	bpl.n	8000914 <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 8000894:	2f00      	cmp	r7, #0
 8000896:	f43f af1d 	beq.w	80006d4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800089a:	69e3      	ldr	r3, [r4, #28]
 800089c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008a0:	61e3      	str	r3, [r4, #28]
 80008a2:	e717      	b.n	80006d4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80008a4:	2700      	movs	r7, #0
 80008a6:	e7e2      	b.n	800086e <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008a8:	6833      	ldr	r3, [r6, #0]
 80008aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ae:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80008b0:	f7ff fdaa 	bl	8000408 <HAL_GetTick>
 80008b4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008b6:	6833      	ldr	r3, [r6, #0]
 80008b8:	05da      	lsls	r2, r3, #23
 80008ba:	d4dc      	bmi.n	8000876 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008bc:	f7ff fda4 	bl	8000408 <HAL_GetTick>
 80008c0:	eba0 0008 	sub.w	r0, r0, r8
 80008c4:	2864      	cmp	r0, #100	; 0x64
 80008c6:	d9f6      	bls.n	80008b6 <HAL_RCC_OscConfig+0x206>
 80008c8:	e733      	b.n	8000732 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008ca:	b9ab      	cbnz	r3, 80008f8 <HAL_RCC_OscConfig+0x248>
 80008cc:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80008ce:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008d2:	f023 0301 	bic.w	r3, r3, #1
 80008d6:	6223      	str	r3, [r4, #32]
 80008d8:	6a23      	ldr	r3, [r4, #32]
 80008da:	f023 0304 	bic.w	r3, r3, #4
 80008de:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008e0:	f7ff fd92 	bl	8000408 <HAL_GetTick>
 80008e4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008e6:	6a23      	ldr	r3, [r4, #32]
 80008e8:	0798      	lsls	r0, r3, #30
 80008ea:	d5d3      	bpl.n	8000894 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80008ec:	f7ff fd8c 	bl	8000408 <HAL_GetTick>
 80008f0:	1b80      	subs	r0, r0, r6
 80008f2:	4540      	cmp	r0, r8
 80008f4:	d9f7      	bls.n	80008e6 <HAL_RCC_OscConfig+0x236>
 80008f6:	e71c      	b.n	8000732 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008f8:	2b05      	cmp	r3, #5
 80008fa:	6a23      	ldr	r3, [r4, #32]
 80008fc:	d103      	bne.n	8000906 <HAL_RCC_OscConfig+0x256>
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	6223      	str	r3, [r4, #32]
 8000904:	e7ba      	b.n	800087c <HAL_RCC_OscConfig+0x1cc>
 8000906:	f023 0301 	bic.w	r3, r3, #1
 800090a:	6223      	str	r3, [r4, #32]
 800090c:	6a23      	ldr	r3, [r4, #32]
 800090e:	f023 0304 	bic.w	r3, r3, #4
 8000912:	e7b6      	b.n	8000882 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000914:	f7ff fd78 	bl	8000408 <HAL_GetTick>
 8000918:	1b80      	subs	r0, r0, r6
 800091a:	4540      	cmp	r0, r8
 800091c:	d9b7      	bls.n	800088e <HAL_RCC_OscConfig+0x1de>
 800091e:	e708      	b.n	8000732 <HAL_RCC_OscConfig+0x82>
 8000920:	40021000 	.word	0x40021000
 8000924:	42420000 	.word	0x42420000
 8000928:	42420480 	.word	0x42420480
 800092c:	20000000 	.word	0x20000000
 8000930:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <HAL_RCC_OscConfig+0x330>)
 8000936:	685a      	ldr	r2, [r3, #4]
 8000938:	461c      	mov	r4, r3
 800093a:	f002 020c 	and.w	r2, r2, #12
 800093e:	2a08      	cmp	r2, #8
 8000940:	d03d      	beq.n	80009be <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000942:	2300      	movs	r3, #0
 8000944:	4e27      	ldr	r6, [pc, #156]	; (80009e4 <HAL_RCC_OscConfig+0x334>)
 8000946:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000948:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800094a:	d12b      	bne.n	80009a4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800094c:	f7ff fd5c 	bl	8000408 <HAL_GetTick>
 8000950:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000952:	6823      	ldr	r3, [r4, #0]
 8000954:	0199      	lsls	r1, r3, #6
 8000956:	d41f      	bmi.n	8000998 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000958:	6a2b      	ldr	r3, [r5, #32]
 800095a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800095e:	d105      	bne.n	800096c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000960:	6862      	ldr	r2, [r4, #4]
 8000962:	68a9      	ldr	r1, [r5, #8]
 8000964:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000968:	430a      	orrs	r2, r1
 800096a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800096c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800096e:	6862      	ldr	r2, [r4, #4]
 8000970:	430b      	orrs	r3, r1
 8000972:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000976:	4313      	orrs	r3, r2
 8000978:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800097a:	2301      	movs	r3, #1
 800097c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800097e:	f7ff fd43 	bl	8000408 <HAL_GetTick>
 8000982:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000984:	6823      	ldr	r3, [r4, #0]
 8000986:	019a      	lsls	r2, r3, #6
 8000988:	f53f aea8 	bmi.w	80006dc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800098c:	f7ff fd3c 	bl	8000408 <HAL_GetTick>
 8000990:	1b40      	subs	r0, r0, r5
 8000992:	2802      	cmp	r0, #2
 8000994:	d9f6      	bls.n	8000984 <HAL_RCC_OscConfig+0x2d4>
 8000996:	e6cc      	b.n	8000732 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000998:	f7ff fd36 	bl	8000408 <HAL_GetTick>
 800099c:	1bc0      	subs	r0, r0, r7
 800099e:	2802      	cmp	r0, #2
 80009a0:	d9d7      	bls.n	8000952 <HAL_RCC_OscConfig+0x2a2>
 80009a2:	e6c6      	b.n	8000732 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80009a4:	f7ff fd30 	bl	8000408 <HAL_GetTick>
 80009a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	019b      	lsls	r3, r3, #6
 80009ae:	f57f ae95 	bpl.w	80006dc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80009b2:	f7ff fd29 	bl	8000408 <HAL_GetTick>
 80009b6:	1b40      	subs	r0, r0, r5
 80009b8:	2802      	cmp	r0, #2
 80009ba:	d9f6      	bls.n	80009aa <HAL_RCC_OscConfig+0x2fa>
 80009bc:	e6b9      	b.n	8000732 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80009be:	2801      	cmp	r0, #1
 80009c0:	f43f aeb8 	beq.w	8000734 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80009c4:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009c6:	6a2a      	ldr	r2, [r5, #32]
 80009c8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80009cc:	4291      	cmp	r1, r2
 80009ce:	f47f ae9b 	bne.w	8000708 <HAL_RCC_OscConfig+0x58>
 80009d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80009d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009d8:	4293      	cmp	r3, r2
 80009da:	f43f ae7f 	beq.w	80006dc <HAL_RCC_OscConfig+0x2c>
 80009de:	e693      	b.n	8000708 <HAL_RCC_OscConfig+0x58>
 80009e0:	40021000 	.word	0x40021000
 80009e4:	42420060 	.word	0x42420060

080009e8 <HAL_RCC_GetSysClockFreq>:
{
 80009e8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_RCC_GetSysClockFreq+0x64>)
{
 80009ec:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009ee:	ac02      	add	r4, sp, #8
 80009f0:	f103 0510 	add.w	r5, r3, #16
 80009f4:	4622      	mov	r2, r4
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	6859      	ldr	r1, [r3, #4]
 80009fa:	3308      	adds	r3, #8
 80009fc:	c203      	stmia	r2!, {r0, r1}
 80009fe:	42ab      	cmp	r3, r5
 8000a00:	4614      	mov	r4, r2
 8000a02:	d1f7      	bne.n	80009f4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a04:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8000a08:	4911      	ldr	r1, [pc, #68]	; (8000a50 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a0a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000a0e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a10:	f003 020c 	and.w	r2, r3, #12
 8000a14:	2a08      	cmp	r2, #8
 8000a16:	d117      	bne.n	8000a48 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a18:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000a1c:	a806      	add	r0, sp, #24
 8000a1e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a20:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a22:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a26:	d50c      	bpl.n	8000a42 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a28:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a2a:	480a      	ldr	r0, [pc, #40]	; (8000a54 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a2c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a30:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a32:	aa06      	add	r2, sp, #24
 8000a34:	4413      	add	r3, r2
 8000a36:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a3a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000a3e:	b007      	add	sp, #28
 8000a40:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <HAL_RCC_GetSysClockFreq+0x70>)
 8000a44:	4350      	muls	r0, r2
 8000a46:	e7fa      	b.n	8000a3e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8000a4a:	e7f8      	b.n	8000a3e <HAL_RCC_GetSysClockFreq+0x56>
 8000a4c:	08000c14 	.word	0x08000c14
 8000a50:	40021000 	.word	0x40021000
 8000a54:	007a1200 	.word	0x007a1200
 8000a58:	003d0900 	.word	0x003d0900

08000a5c <HAL_RCC_ClockConfig>:
{
 8000a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a60:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000a62:	4604      	mov	r4, r0
 8000a64:	b910      	cbnz	r0, 8000a6c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000a66:	2001      	movs	r0, #1
}
 8000a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000a6c:	4a44      	ldr	r2, [pc, #272]	; (8000b80 <HAL_RCC_ClockConfig+0x124>)
 8000a6e:	6813      	ldr	r3, [r2, #0]
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	428b      	cmp	r3, r1
 8000a76:	d328      	bcc.n	8000aca <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a78:	6821      	ldr	r1, [r4, #0]
 8000a7a:	078e      	lsls	r6, r1, #30
 8000a7c:	d430      	bmi.n	8000ae0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a7e:	07ca      	lsls	r2, r1, #31
 8000a80:	d443      	bmi.n	8000b0a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000a82:	4a3f      	ldr	r2, [pc, #252]	; (8000b80 <HAL_RCC_ClockConfig+0x124>)
 8000a84:	6813      	ldr	r3, [r2, #0]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	42ab      	cmp	r3, r5
 8000a8c:	d865      	bhi.n	8000b5a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a8e:	6822      	ldr	r2, [r4, #0]
 8000a90:	4d3c      	ldr	r5, [pc, #240]	; (8000b84 <HAL_RCC_ClockConfig+0x128>)
 8000a92:	f012 0f04 	tst.w	r2, #4
 8000a96:	d16c      	bne.n	8000b72 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a98:	0713      	lsls	r3, r2, #28
 8000a9a:	d506      	bpl.n	8000aaa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a9c:	686b      	ldr	r3, [r5, #4]
 8000a9e:	6922      	ldr	r2, [r4, #16]
 8000aa0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000aa4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000aa8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000aaa:	f7ff ff9d 	bl	80009e8 <HAL_RCC_GetSysClockFreq>
 8000aae:	686b      	ldr	r3, [r5, #4]
 8000ab0:	4a35      	ldr	r2, [pc, #212]	; (8000b88 <HAL_RCC_ClockConfig+0x12c>)
 8000ab2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ab6:	5cd3      	ldrb	r3, [r2, r3]
 8000ab8:	40d8      	lsrs	r0, r3
 8000aba:	4b34      	ldr	r3, [pc, #208]	; (8000b8c <HAL_RCC_ClockConfig+0x130>)
 8000abc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000abe:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <HAL_RCC_ClockConfig+0x134>)
 8000ac0:	6818      	ldr	r0, [r3, #0]
 8000ac2:	f7ff fc6b 	bl	800039c <HAL_InitTick>
  return HAL_OK;
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	e7ce      	b.n	8000a68 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000aca:	6813      	ldr	r3, [r2, #0]
 8000acc:	f023 0307 	bic.w	r3, r3, #7
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ad4:	6813      	ldr	r3, [r2, #0]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d1c3      	bne.n	8000a66 <HAL_RCC_ClockConfig+0xa>
 8000ade:	e7cb      	b.n	8000a78 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ae0:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <HAL_RCC_ClockConfig+0x128>)
 8000ae2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ae6:	bf1e      	ittt	ne
 8000ae8:	685a      	ldrne	r2, [r3, #4]
 8000aea:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000aee:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000af0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000af2:	bf42      	ittt	mi
 8000af4:	685a      	ldrmi	r2, [r3, #4]
 8000af6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000afa:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	68a0      	ldr	r0, [r4, #8]
 8000b00:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000b04:	4302      	orrs	r2, r0
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	e7b9      	b.n	8000a7e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b0a:	6862      	ldr	r2, [r4, #4]
 8000b0c:	4e1d      	ldr	r6, [pc, #116]	; (8000b84 <HAL_RCC_ClockConfig+0x128>)
 8000b0e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b10:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b12:	d11a      	bne.n	8000b4a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b18:	d0a5      	beq.n	8000a66 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b1a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b1c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b20:	f023 0303 	bic.w	r3, r3, #3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000b28:	f7ff fc6e 	bl	8000408 <HAL_GetTick>
 8000b2c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b2e:	6873      	ldr	r3, [r6, #4]
 8000b30:	6862      	ldr	r2, [r4, #4]
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000b3a:	d0a2      	beq.n	8000a82 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b3c:	f7ff fc64 	bl	8000408 <HAL_GetTick>
 8000b40:	1bc0      	subs	r0, r0, r7
 8000b42:	4540      	cmp	r0, r8
 8000b44:	d9f3      	bls.n	8000b2e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8000b46:	2003      	movs	r0, #3
 8000b48:	e78e      	b.n	8000a68 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b4a:	2a02      	cmp	r2, #2
 8000b4c:	d102      	bne.n	8000b54 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b4e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b52:	e7e1      	b.n	8000b18 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b54:	f013 0f02 	tst.w	r3, #2
 8000b58:	e7de      	b.n	8000b18 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b5a:	6813      	ldr	r3, [r2, #0]
 8000b5c:	f023 0307 	bic.w	r3, r3, #7
 8000b60:	432b      	orrs	r3, r5
 8000b62:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b64:	6813      	ldr	r3, [r2, #0]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	42ab      	cmp	r3, r5
 8000b6c:	f47f af7b 	bne.w	8000a66 <HAL_RCC_ClockConfig+0xa>
 8000b70:	e78d      	b.n	8000a8e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b72:	686b      	ldr	r3, [r5, #4]
 8000b74:	68e1      	ldr	r1, [r4, #12]
 8000b76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b7a:	430b      	orrs	r3, r1
 8000b7c:	606b      	str	r3, [r5, #4]
 8000b7e:	e78b      	b.n	8000a98 <HAL_RCC_ClockConfig+0x3c>
 8000b80:	40022000 	.word	0x40022000
 8000b84:	40021000 	.word	0x40021000
 8000b88:	08000c04 	.word	0x08000c04
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	20000008 	.word	0x20000008

08000b94 <__libc_init_array>:
 8000b94:	b570      	push	{r4, r5, r6, lr}
 8000b96:	2600      	movs	r6, #0
 8000b98:	4d0c      	ldr	r5, [pc, #48]	; (8000bcc <__libc_init_array+0x38>)
 8000b9a:	4c0d      	ldr	r4, [pc, #52]	; (8000bd0 <__libc_init_array+0x3c>)
 8000b9c:	1b64      	subs	r4, r4, r5
 8000b9e:	10a4      	asrs	r4, r4, #2
 8000ba0:	42a6      	cmp	r6, r4
 8000ba2:	d109      	bne.n	8000bb8 <__libc_init_array+0x24>
 8000ba4:	f000 f822 	bl	8000bec <_init>
 8000ba8:	2600      	movs	r6, #0
 8000baa:	4d0a      	ldr	r5, [pc, #40]	; (8000bd4 <__libc_init_array+0x40>)
 8000bac:	4c0a      	ldr	r4, [pc, #40]	; (8000bd8 <__libc_init_array+0x44>)
 8000bae:	1b64      	subs	r4, r4, r5
 8000bb0:	10a4      	asrs	r4, r4, #2
 8000bb2:	42a6      	cmp	r6, r4
 8000bb4:	d105      	bne.n	8000bc2 <__libc_init_array+0x2e>
 8000bb6:	bd70      	pop	{r4, r5, r6, pc}
 8000bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bbc:	4798      	blx	r3
 8000bbe:	3601      	adds	r6, #1
 8000bc0:	e7ee      	b.n	8000ba0 <__libc_init_array+0xc>
 8000bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bc6:	4798      	blx	r3
 8000bc8:	3601      	adds	r6, #1
 8000bca:	e7f2      	b.n	8000bb2 <__libc_init_array+0x1e>
 8000bcc:	08000c28 	.word	0x08000c28
 8000bd0:	08000c28 	.word	0x08000c28
 8000bd4:	08000c28 	.word	0x08000c28
 8000bd8:	08000c2c 	.word	0x08000c2c

08000bdc <memset>:
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4402      	add	r2, r0
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d100      	bne.n	8000be6 <memset+0xa>
 8000be4:	4770      	bx	lr
 8000be6:	f803 1b01 	strb.w	r1, [r3], #1
 8000bea:	e7f9      	b.n	8000be0 <memset+0x4>

08000bec <_init>:
 8000bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bee:	bf00      	nop
 8000bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bf2:	bc08      	pop	{r3}
 8000bf4:	469e      	mov	lr, r3
 8000bf6:	4770      	bx	lr

08000bf8 <_fini>:
 8000bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfa:	bf00      	nop
 8000bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bfe:	bc08      	pop	{r3}
 8000c00:	469e      	mov	lr, r3
 8000c02:	4770      	bx	lr
