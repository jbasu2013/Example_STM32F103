
ADC_DMA_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002014  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002120  08002120  00012120  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002184  08002184  00012184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002188  08002188  00012188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  0800218c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000178  20000070  080021fc  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001e8  080021fc  000201e8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b40c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002463  00000000  00000000  0002b4a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00004f3d  00000000  00000000  0002d908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000007b0  00000000  00000000  00032848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a68  00000000  00000000  00032ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000184e2  00000000  00000000  00033a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ba56  00000000  00000000  0004bf42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00088e80  00000000  00000000  00057998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  000e0818  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001888  00000000  00000000  000e086c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002108 	.word	0x08002108

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002108 	.word	0x08002108

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 fb22 	bl	80007bc <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000188:	f000 fad8 	bl	800073c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4620      	mov	r0, r4
 800018e:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 8000190:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
 8000196:	e7fc      	b.n	8000192 <HAL_InitTick+0x36>
 8000198:	20000000 	.word	0x20000000
 800019c:	20000008 	.word	0x20000008
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 fab1 	bl	8000718 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f001 fa06 	bl	80015cc <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000011c 	.word	0x2000011c
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	2000011c 	.word	0x2000011c

080001ec <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80001ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80001ee:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80001f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80001f2:	f012 0f50 	tst.w	r2, #80	; 0x50
 80001f6:	d11b      	bne.n	8000230 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80001f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80001fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001fe:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	6892      	ldr	r2, [r2, #8]
 8000204:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000208:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800020c:	d10c      	bne.n	8000228 <ADC_DMAConvCplt+0x3c>
 800020e:	7b1a      	ldrb	r2, [r3, #12]
 8000210:	b952      	cbnz	r2, 8000228 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000218:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800021a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800021c:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800021e:	bf5e      	ittt	pl
 8000220:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000222:	f042 0201 	orrpl.w	r2, r2, #1
 8000226:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000228:	4618      	mov	r0, r3
 800022a:	f001 f8b5 	bl	8001398 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800022e:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000230:	6a1b      	ldr	r3, [r3, #32]
}
 8000232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4718      	bx	r3

0800023a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800023a:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800023c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800023e:	f001 f8b7 	bl	80013b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000242:	bd08      	pop	{r3, pc}

08000244 <HAL_ADC_ErrorCallback>:
 8000244:	4770      	bx	lr

08000246 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000246:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000248:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800024a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800024c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000250:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000252:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000254:	f043 0304 	orr.w	r3, r3, #4
 8000258:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800025a:	f7ff fff3 	bl	8000244 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800025e:	bd08      	pop	{r3, pc}

08000260 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000260:	2300      	movs	r3, #0
{ 
 8000262:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000264:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000266:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 800026a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800026c:	2b01      	cmp	r3, #1
 800026e:	d06c      	beq.n	800034a <HAL_ADC_ConfigChannel+0xea>
 8000270:	2301      	movs	r3, #1
 8000272:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000276:	684d      	ldr	r5, [r1, #4]
 8000278:	6802      	ldr	r2, [r0, #0]
 800027a:	2d06      	cmp	r5, #6
 800027c:	6808      	ldr	r0, [r1, #0]
 800027e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000282:	d822      	bhi.n	80002ca <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000284:	261f      	movs	r6, #31
 8000286:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8000288:	3b05      	subs	r3, #5
 800028a:	409e      	lsls	r6, r3
 800028c:	ea25 0506 	bic.w	r5, r5, r6
 8000290:	fa00 f303 	lsl.w	r3, r0, r3
 8000294:	432b      	orrs	r3, r5
 8000296:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000298:	2809      	cmp	r0, #9
 800029a:	688b      	ldr	r3, [r1, #8]
 800029c:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80002a0:	f04f 0107 	mov.w	r1, #7
 80002a4:	d929      	bls.n	80002fa <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80002a6:	68d6      	ldr	r6, [r2, #12]
 80002a8:	3d1e      	subs	r5, #30
 80002aa:	40a9      	lsls	r1, r5
 80002ac:	ea26 0101 	bic.w	r1, r6, r1
 80002b0:	40ab      	lsls	r3, r5
 80002b2:	430b      	orrs	r3, r1
 80002b4:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80002b6:	f1a0 0310 	sub.w	r3, r0, #16
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d925      	bls.n	800030a <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002be:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80002c0:	2300      	movs	r3, #0
 80002c2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80002c6:	b002      	add	sp, #8
 80002c8:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80002ca:	2d0c      	cmp	r5, #12
 80002cc:	f04f 051f 	mov.w	r5, #31
 80002d0:	d809      	bhi.n	80002e6 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80002d2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80002d4:	3b23      	subs	r3, #35	; 0x23
 80002d6:	409d      	lsls	r5, r3
 80002d8:	ea26 0505 	bic.w	r5, r6, r5
 80002dc:	fa00 f303 	lsl.w	r3, r0, r3
 80002e0:	432b      	orrs	r3, r5
 80002e2:	6313      	str	r3, [r2, #48]	; 0x30
 80002e4:	e7d8      	b.n	8000298 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80002e6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80002e8:	3b41      	subs	r3, #65	; 0x41
 80002ea:	409d      	lsls	r5, r3
 80002ec:	ea26 0505 	bic.w	r5, r6, r5
 80002f0:	fa00 f303 	lsl.w	r3, r0, r3
 80002f4:	432b      	orrs	r3, r5
 80002f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80002f8:	e7ce      	b.n	8000298 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80002fa:	6910      	ldr	r0, [r2, #16]
 80002fc:	40a9      	lsls	r1, r5
 80002fe:	ea20 0101 	bic.w	r1, r0, r1
 8000302:	40ab      	lsls	r3, r5
 8000304:	430b      	orrs	r3, r1
 8000306:	6113      	str	r3, [r2, #16]
 8000308:	e7d9      	b.n	80002be <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 800030a:	4b11      	ldr	r3, [pc, #68]	; (8000350 <HAL_ADC_ConfigChannel+0xf0>)
 800030c:	429a      	cmp	r2, r3
 800030e:	d116      	bne.n	800033e <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000310:	6893      	ldr	r3, [r2, #8]
 8000312:	021b      	lsls	r3, r3, #8
 8000314:	d4d3      	bmi.n	80002be <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000316:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000318:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800031a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800031e:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000320:	d1cd      	bne.n	80002be <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000322:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <HAL_ADC_ConfigChannel+0xf4>)
 8000324:	4a0c      	ldr	r2, [pc, #48]	; (8000358 <HAL_ADC_ConfigChannel+0xf8>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	fbb3 f2f2 	udiv	r2, r3, r2
 800032c:	230a      	movs	r3, #10
 800032e:	4353      	muls	r3, r2
            wait_loop_index--;
 8000330:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000332:	9b01      	ldr	r3, [sp, #4]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0c2      	beq.n	80002be <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8000338:	9b01      	ldr	r3, [sp, #4]
 800033a:	3b01      	subs	r3, #1
 800033c:	e7f8      	b.n	8000330 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800033e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000340:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000348:	e7ba      	b.n	80002c0 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 800034a:	2002      	movs	r0, #2
 800034c:	e7bb      	b.n	80002c6 <HAL_ADC_ConfigChannel+0x66>
 800034e:	bf00      	nop
 8000350:	40012400 	.word	0x40012400
 8000354:	20000008 	.word	0x20000008
 8000358:	000f4240 	.word	0x000f4240

0800035c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800035c:	2300      	movs	r3, #0
{
 800035e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000360:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000362:	6803      	ldr	r3, [r0, #0]
{
 8000364:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000366:	689a      	ldr	r2, [r3, #8]
 8000368:	07d2      	lsls	r2, r2, #31
 800036a:	d502      	bpl.n	8000372 <ADC_Enable+0x16>
  return HAL_OK;
 800036c:	2000      	movs	r0, #0
}
 800036e:	b003      	add	sp, #12
 8000370:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000372:	689a      	ldr	r2, [r3, #8]
 8000374:	f042 0201 	orr.w	r2, r2, #1
 8000378:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <ADC_Enable+0x70>)
 800037c:	4a14      	ldr	r2, [pc, #80]	; (80003d0 <ADC_Enable+0x74>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000384:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000386:	9b01      	ldr	r3, [sp, #4]
 8000388:	b9e3      	cbnz	r3, 80003c4 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 800038a:	f7ff ff29 	bl	80001e0 <HAL_GetTick>
 800038e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000390:	6823      	ldr	r3, [r4, #0]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	07db      	lsls	r3, r3, #31
 8000396:	d4e9      	bmi.n	800036c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000398:	f7ff ff22 	bl	80001e0 <HAL_GetTick>
 800039c:	1b40      	subs	r0, r0, r5
 800039e:	2802      	cmp	r0, #2
 80003a0:	d9f6      	bls.n	8000390 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80003a2:	6823      	ldr	r3, [r4, #0]
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	f013 0301 	ands.w	r3, r3, #1
 80003aa:	d1f1      	bne.n	8000390 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80003ae:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003b0:	f042 0210 	orr.w	r2, r2, #16
 80003b4:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 80003b8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003bc:	f042 0201 	orr.w	r2, r2, #1
 80003c0:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80003c2:	e7d4      	b.n	800036e <ADC_Enable+0x12>
      wait_loop_index--;
 80003c4:	9b01      	ldr	r3, [sp, #4]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	e7dc      	b.n	8000384 <ADC_Enable+0x28>
 80003ca:	bf00      	nop
 80003cc:	20000008 	.word	0x20000008
 80003d0:	000f4240 	.word	0x000f4240

080003d4 <HAL_ADC_Start_DMA>:
{
 80003d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80003d8:	4b40      	ldr	r3, [pc, #256]	; (80004dc <HAL_ADC_Start_DMA+0x108>)
{
 80003da:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80003dc:	6802      	ldr	r2, [r0, #0]
{
 80003de:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80003e0:	429a      	cmp	r2, r3
{
 80003e2:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80003e4:	d002      	beq.n	80003ec <HAL_ADC_Start_DMA+0x18>
 80003e6:	493e      	ldr	r1, [pc, #248]	; (80004e0 <HAL_ADC_Start_DMA+0x10c>)
 80003e8:	428a      	cmp	r2, r1
 80003ea:	d103      	bne.n	80003f4 <HAL_ADC_Start_DMA+0x20>
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80003f2:	d16e      	bne.n	80004d2 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80003f4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d06c      	beq.n	80004d6 <HAL_ADC_Start_DMA+0x102>
 80003fc:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80003fe:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8000400:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000404:	f7ff ffaa 	bl	800035c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000408:	4606      	mov	r6, r0
 800040a:	2800      	cmp	r0, #0
 800040c:	d15d      	bne.n	80004ca <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800040e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000410:	6821      	ldr	r1, [r4, #0]
 8000412:	4b33      	ldr	r3, [pc, #204]	; (80004e0 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000414:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8000418:	f025 0501 	bic.w	r5, r5, #1
 800041c:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000420:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8000422:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000424:	d104      	bne.n	8000430 <HAL_ADC_Start_DMA+0x5c>
 8000426:	4a2d      	ldr	r2, [pc, #180]	; (80004dc <HAL_ADC_Start_DMA+0x108>)
 8000428:	6853      	ldr	r3, [r2, #4]
 800042a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800042e:	d13e      	bne.n	80004ae <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000430:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000432:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000436:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000438:	684b      	ldr	r3, [r1, #4]
 800043a:	055a      	lsls	r2, r3, #21
 800043c:	d505      	bpl.n	800044a <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800043e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000440:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000448:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800044a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800044c:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800044e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000452:	bf18      	it	ne
 8000454:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000456:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000458:	bf18      	it	ne
 800045a:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800045e:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000460:	2300      	movs	r3, #0
 8000462:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000466:	4b1f      	ldr	r3, [pc, #124]	; (80004e4 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000468:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800046a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800046c:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <HAL_ADC_Start_DMA+0x114>)
 800046e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000470:	4b1e      	ldr	r3, [pc, #120]	; (80004ec <HAL_ADC_Start_DMA+0x118>)
 8000472:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000474:	f06f 0302 	mvn.w	r3, #2
 8000478:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800047c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000484:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000488:	4643      	mov	r3, r8
 800048a:	f000 f9db 	bl	8000844 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800048e:	6823      	ldr	r3, [r4, #0]
 8000490:	689a      	ldr	r2, [r3, #8]
 8000492:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000496:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800049a:	689a      	ldr	r2, [r3, #8]
 800049c:	bf0c      	ite	eq
 800049e:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80004a2:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80004a6:	609a      	str	r2, [r3, #8]
}
 80004a8:	4630      	mov	r0, r6
 80004aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80004ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004b4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80004b6:	6853      	ldr	r3, [r2, #4]
 80004b8:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004ba:	bf41      	itttt	mi
 80004bc:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80004be:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80004c2:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80004c6:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80004c8:	e7bf      	b.n	800044a <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80004ca:	2300      	movs	r3, #0
 80004cc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80004d0:	e7ea      	b.n	80004a8 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80004d2:	2601      	movs	r6, #1
 80004d4:	e7e8      	b.n	80004a8 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80004d6:	2602      	movs	r6, #2
 80004d8:	e7e6      	b.n	80004a8 <HAL_ADC_Start_DMA+0xd4>
 80004da:	bf00      	nop
 80004dc:	40012400 	.word	0x40012400
 80004e0:	40012800 	.word	0x40012800
 80004e4:	080001ed 	.word	0x080001ed
 80004e8:	0800023b 	.word	0x0800023b
 80004ec:	08000247 	.word	0x08000247

080004f0 <ADC_ConversionStop_Disable>:
{
 80004f0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80004f2:	6803      	ldr	r3, [r0, #0]
{
 80004f4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80004f6:	689a      	ldr	r2, [r3, #8]
 80004f8:	07d1      	lsls	r1, r2, #31
 80004fa:	d401      	bmi.n	8000500 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80004fc:	2000      	movs	r0, #0
}
 80004fe:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000500:	689a      	ldr	r2, [r3, #8]
 8000502:	f022 0201 	bic.w	r2, r2, #1
 8000506:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000508:	f7ff fe6a 	bl	80001e0 <HAL_GetTick>
 800050c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800050e:	6823      	ldr	r3, [r4, #0]
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	07db      	lsls	r3, r3, #31
 8000514:	d5f2      	bpl.n	80004fc <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000516:	f7ff fe63 	bl	80001e0 <HAL_GetTick>
 800051a:	1b40      	subs	r0, r0, r5
 800051c:	2802      	cmp	r0, #2
 800051e:	d9f6      	bls.n	800050e <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000520:	6823      	ldr	r3, [r4, #0]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	07da      	lsls	r2, r3, #31
 8000526:	d5f2      	bpl.n	800050e <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000528:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800052a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800052c:	f043 0310 	orr.w	r3, r3, #16
 8000530:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000532:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800053a:	e7e0      	b.n	80004fe <ADC_ConversionStop_Disable+0xe>

0800053c <HAL_ADC_Init>:
{
 800053c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 800053e:	4604      	mov	r4, r0
 8000540:	2800      	cmp	r0, #0
 8000542:	d06e      	beq.n	8000622 <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000544:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000546:	b923      	cbnz	r3, 8000552 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000548:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800054a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800054e:	f001 f85f 	bl	8001610 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000552:	4620      	mov	r0, r4
 8000554:	f7ff ffcc 	bl	80004f0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000558:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800055a:	f013 0310 	ands.w	r3, r3, #16
 800055e:	d162      	bne.n	8000626 <HAL_ADC_Init+0xea>
 8000560:	2800      	cmp	r0, #0
 8000562:	d160      	bne.n	8000626 <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 8000564:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000566:	69e5      	ldr	r5, [r4, #28]
 8000568:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800056a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800056e:	f022 0202 	bic.w	r2, r2, #2
 8000572:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000576:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000578:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800057a:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800057c:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800057e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000582:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000586:	d037      	beq.n	80005f8 <HAL_ADC_Init+0xbc>
 8000588:	2d01      	cmp	r5, #1
 800058a:	bf14      	ite	ne
 800058c:	2700      	movne	r7, #0
 800058e:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000592:	7d26      	ldrb	r6, [r4, #20]
 8000594:	2e01      	cmp	r6, #1
 8000596:	d106      	bne.n	80005a6 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000598:	bb82      	cbnz	r2, 80005fc <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800059a:	69a2      	ldr	r2, [r4, #24]
 800059c:	3a01      	subs	r2, #1
 800059e:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 80005a2:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80005a6:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80005a8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80005ac:	6856      	ldr	r6, [r2, #4]
 80005ae:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 80005b2:	ea46 0607 	orr.w	r6, r6, r7
 80005b6:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80005b8:	6897      	ldr	r7, [r2, #8]
 80005ba:	4e1d      	ldr	r6, [pc, #116]	; (8000630 <HAL_ADC_Init+0xf4>)
 80005bc:	ea06 0607 	and.w	r6, r6, r7
 80005c0:	ea46 0601 	orr.w	r6, r6, r1
 80005c4:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80005c6:	d001      	beq.n	80005cc <HAL_ADC_Init+0x90>
 80005c8:	2d01      	cmp	r5, #1
 80005ca:	d102      	bne.n	80005d2 <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80005cc:	6923      	ldr	r3, [r4, #16]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80005d2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80005d4:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80005d8:	432b      	orrs	r3, r5
 80005da:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80005dc:	6892      	ldr	r2, [r2, #8]
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <HAL_ADC_Init+0xf8>)
 80005e0:	4013      	ands	r3, r2
 80005e2:	4299      	cmp	r1, r3
 80005e4:	d113      	bne.n	800060e <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 80005e6:	2300      	movs	r3, #0
 80005e8:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80005ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005ec:	f023 0303 	bic.w	r3, r3, #3
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80005f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005f8:	462f      	mov	r7, r5
 80005fa:	e7ca      	b.n	8000592 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005fe:	f042 0220 	orr.w	r2, r2, #32
 8000602:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000604:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000606:	f042 0201 	orr.w	r2, r2, #1
 800060a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800060c:	e7cb      	b.n	80005a6 <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 800060e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000610:	f023 0312 	bic.w	r3, r3, #18
 8000614:	f043 0310 	orr.w	r3, r3, #16
 8000618:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800061a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000622:	2001      	movs	r0, #1
 8000624:	e7e7      	b.n	80005f6 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000626:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000628:	f043 0310 	orr.w	r3, r3, #16
 800062c:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 800062e:	e7f8      	b.n	8000622 <HAL_ADC_Init+0xe6>
 8000630:	ffe1f7fd 	.word	0xffe1f7fd
 8000634:	ff1f0efe 	.word	0xff1f0efe

08000638 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000638:	2300      	movs	r3, #0
{
 800063a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800063c:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800063e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000642:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000644:	2b01      	cmp	r3, #1
 8000646:	d062      	beq.n	800070e <HAL_ADCEx_Calibration_Start+0xd6>
 8000648:	2301      	movs	r3, #1
 800064a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800064e:	f7ff ff4f 	bl	80004f0 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000652:	4605      	mov	r5, r0
 8000654:	2800      	cmp	r0, #0
 8000656:	d132      	bne.n	80006be <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000658:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800065a:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 800065c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000660:	f023 0302 	bic.w	r3, r3, #2
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800066a:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <HAL_ADCEx_Calibration_Start+0xdc>)
 800066c:	681e      	ldr	r6, [r3, #0]
 800066e:	f000 fd9d 	bl	80011ac <HAL_RCCEx_GetPeriphCLKFreq>
 8000672:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000676:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8000678:	9601      	str	r6, [sp, #4]

    while(wait_loop_index != 0U)
 800067a:	9b01      	ldr	r3, [sp, #4]
 800067c:	bb1b      	cbnz	r3, 80006c6 <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800067e:	4620      	mov	r0, r4
 8000680:	f7ff fe6c 	bl	800035c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000684:	6822      	ldr	r2, [r4, #0]
 8000686:	6893      	ldr	r3, [r2, #8]
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 800068e:	f7ff fda7 	bl	80001e0 <HAL_GetTick>
 8000692:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000694:	6823      	ldr	r3, [r4, #0]
 8000696:	689a      	ldr	r2, [r3, #8]
 8000698:	0711      	lsls	r1, r2, #28
 800069a:	d418      	bmi.n	80006ce <HAL_ADCEx_Calibration_Start+0x96>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	f042 0204 	orr.w	r2, r2, #4
 80006a2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80006a4:	f7ff fd9c 	bl	80001e0 <HAL_GetTick>
 80006a8:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80006aa:	6823      	ldr	r3, [r4, #0]
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	075b      	lsls	r3, r3, #29
 80006b0:	d423      	bmi.n	80006fa <HAL_ADCEx_Calibration_Start+0xc2>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006b4:	f023 0303 	bic.w	r3, r3, #3
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80006be:	2300      	movs	r3, #0
 80006c0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80006c4:	e016      	b.n	80006f4 <HAL_ADCEx_Calibration_Start+0xbc>
      wait_loop_index--;
 80006c6:	9b01      	ldr	r3, [sp, #4]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	e7d5      	b.n	800067a <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80006ce:	f7ff fd87 	bl	80001e0 <HAL_GetTick>
 80006d2:	1b80      	subs	r0, r0, r6
 80006d4:	280a      	cmp	r0, #10
 80006d6:	d9dd      	bls.n	8000694 <HAL_ADCEx_Calibration_Start+0x5c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80006d8:	6823      	ldr	r3, [r4, #0]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	0718      	lsls	r0, r3, #28
 80006de:	d5d9      	bpl.n	8000694 <HAL_ADCEx_Calibration_Start+0x5c>
          ADC_STATE_CLR_SET(hadc->State,
 80006e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 80006e2:	2501      	movs	r5, #1
          ADC_STATE_CLR_SET(hadc->State,
 80006e4:	f023 0312 	bic.w	r3, r3, #18
 80006e8:	f043 0310 	orr.w	r3, r3, #16
 80006ec:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80006ee:	2300      	movs	r3, #0
 80006f0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80006f4:	4628      	mov	r0, r5
 80006f6:	b002      	add	sp, #8
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80006fa:	f7ff fd71 	bl	80001e0 <HAL_GetTick>
 80006fe:	1b80      	subs	r0, r0, r6
 8000700:	280a      	cmp	r0, #10
 8000702:	d9d2      	bls.n	80006aa <HAL_ADCEx_Calibration_Start+0x72>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000704:	6823      	ldr	r3, [r4, #0]
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	075a      	lsls	r2, r3, #29
 800070a:	d5ce      	bpl.n	80006aa <HAL_ADCEx_Calibration_Start+0x72>
 800070c:	e7e8      	b.n	80006e0 <HAL_ADCEx_Calibration_Start+0xa8>
  __HAL_LOCK(hadc);
 800070e:	2502      	movs	r5, #2
 8000710:	e7f0      	b.n	80006f4 <HAL_ADCEx_Calibration_Start+0xbc>
 8000712:	bf00      	nop
 8000714:	20000008 	.word	0x20000008

08000718 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000718:	4907      	ldr	r1, [pc, #28]	; (8000738 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800071a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800071c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800071e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000722:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000726:	0412      	lsls	r2, r2, #16
 8000728:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800072a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800072c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000734:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000736:	4770      	bx	lr
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	68dc      	ldr	r4, [r3, #12]
 8000742:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000746:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800074c:	2b04      	cmp	r3, #4
 800074e:	bf28      	it	cs
 8000750:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000752:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000758:	bf98      	it	ls
 800075a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800075c:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000760:	bf88      	it	hi
 8000762:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	ea21 0303 	bic.w	r3, r1, r3
 8000768:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076a:	fa05 f404 	lsl.w	r4, r5, r4
 800076e:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000772:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000778:	bfac      	ite	ge
 800077a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077e:	4a07      	ldrlt	r2, [pc, #28]	; (800079c <HAL_NVIC_SetPriority+0x60>)
 8000780:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000784:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000786:	bfab      	itete	ge
 8000788:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000796:	bd30      	pop	{r4, r5, pc}
 8000798:	e000ed00 	.word	0xe000ed00
 800079c:	e000ed14 	.word	0xe000ed14

080007a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80007a0:	2800      	cmp	r0, #0
 80007a2:	db08      	blt.n	80007b6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a4:	2301      	movs	r3, #1
 80007a6:	0942      	lsrs	r2, r0, #5
 80007a8:	f000 001f 	and.w	r0, r0, #31
 80007ac:	fa03 f000 	lsl.w	r0, r3, r0
 80007b0:	4b01      	ldr	r3, [pc, #4]	; (80007b8 <HAL_NVIC_EnableIRQ+0x18>)
 80007b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80007b6:	4770      	bx	lr
 80007b8:	e000e100 	.word	0xe000e100

080007bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007bc:	3801      	subs	r0, #1
 80007be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007c2:	d20a      	bcs.n	80007da <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c8:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ca:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000e010 	.word	0xe000e010
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007e8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80007ea:	b320      	cbz	r0, 8000836 <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80007ec:	2214      	movs	r2, #20
 80007ee:	6801      	ldr	r1, [r0, #0]
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_DMA_Init+0x54>)
 80007f2:	440b      	add	r3, r1
 80007f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80007fe:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000800:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000802:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8000806:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000808:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800080a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800080e:	4323      	orrs	r3, r4
 8000810:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000812:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000816:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000818:	6944      	ldr	r4, [r0, #20]
 800081a:	4323      	orrs	r3, r4
 800081c:	6984      	ldr	r4, [r0, #24]
 800081e:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000820:	69c4      	ldr	r4, [r0, #28]
 8000822:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000824:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000826:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000828:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800082c:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 800082e:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000830:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8000832:	4618      	mov	r0, r3
}
 8000834:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000836:	2001      	movs	r0, #1
 8000838:	e7fc      	b.n	8000834 <HAL_DMA_Init+0x4c>
 800083a:	bf00      	nop
 800083c:	bffdfff8 	.word	0xbffdfff8
 8000840:	40020000 	.word	0x40020000

08000844 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000844:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000846:	f890 4020 	ldrb.w	r4, [r0, #32]
 800084a:	2c01      	cmp	r4, #1
 800084c:	d034      	beq.n	80008b8 <HAL_DMA_Start_IT+0x74>
 800084e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000850:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000854:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000858:	42a5      	cmp	r5, r4
 800085a:	f04f 0600 	mov.w	r6, #0
 800085e:	f04f 0402 	mov.w	r4, #2
 8000862:	d127      	bne.n	80008b4 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000864:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000868:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800086a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800086c:	6826      	ldr	r6, [r4, #0]
 800086e:	f026 0601 	bic.w	r6, r6, #1
 8000872:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000874:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8000878:	40bd      	lsls	r5, r7
 800087a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800087c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800087e:	6843      	ldr	r3, [r0, #4]
 8000880:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000882:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000884:	bf0b      	itete	eq
 8000886:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000888:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800088a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800088c:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800088e:	b14b      	cbz	r3, 80008a4 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000890:	6823      	ldr	r3, [r4, #0]
 8000892:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8000896:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000898:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800089a:	6823      	ldr	r3, [r4, #0]
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6023      	str	r3, [r4, #0]
}
 80008a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80008a4:	6823      	ldr	r3, [r4, #0]
 80008a6:	f023 0304 	bic.w	r3, r3, #4
 80008aa:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80008ac:	6823      	ldr	r3, [r4, #0]
 80008ae:	f043 030a 	orr.w	r3, r3, #10
 80008b2:	e7f0      	b.n	8000896 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 80008b4:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80008b8:	2002      	movs	r0, #2
 80008ba:	e7f2      	b.n	80008a2 <HAL_DMA_Start_IT+0x5e>

080008bc <HAL_DMA_IRQHandler>:
{
 80008bc:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80008be:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80008c0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80008c2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80008c4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80008c6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80008c8:	4095      	lsls	r5, r2
 80008ca:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80008cc:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80008ce:	d032      	beq.n	8000936 <HAL_DMA_IRQHandler+0x7a>
 80008d0:	074d      	lsls	r5, r1, #29
 80008d2:	d530      	bpl.n	8000936 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80008d8:	bf5e      	ittt	pl
 80008da:	681a      	ldrpl	r2, [r3, #0]
 80008dc:	f022 0204 	bicpl.w	r2, r2, #4
 80008e0:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80008e2:	4a3d      	ldr	r2, [pc, #244]	; (80009d8 <HAL_DMA_IRQHandler+0x11c>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d019      	beq.n	800091c <HAL_DMA_IRQHandler+0x60>
 80008e8:	3214      	adds	r2, #20
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d018      	beq.n	8000920 <HAL_DMA_IRQHandler+0x64>
 80008ee:	3214      	adds	r2, #20
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d017      	beq.n	8000924 <HAL_DMA_IRQHandler+0x68>
 80008f4:	3214      	adds	r2, #20
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d017      	beq.n	800092a <HAL_DMA_IRQHandler+0x6e>
 80008fa:	3214      	adds	r2, #20
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d017      	beq.n	8000930 <HAL_DMA_IRQHandler+0x74>
 8000900:	3214      	adds	r2, #20
 8000902:	4293      	cmp	r3, r2
 8000904:	bf0c      	ite	eq
 8000906:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800090a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800090e:	4a33      	ldr	r2, [pc, #204]	; (80009dc <HAL_DMA_IRQHandler+0x120>)
 8000910:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000912:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000914:	2b00      	cmp	r3, #0
 8000916:	d05c      	beq.n	80009d2 <HAL_DMA_IRQHandler+0x116>
}
 8000918:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800091a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800091c:	2304      	movs	r3, #4
 800091e:	e7f6      	b.n	800090e <HAL_DMA_IRQHandler+0x52>
 8000920:	2340      	movs	r3, #64	; 0x40
 8000922:	e7f4      	b.n	800090e <HAL_DMA_IRQHandler+0x52>
 8000924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000928:	e7f1      	b.n	800090e <HAL_DMA_IRQHandler+0x52>
 800092a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800092e:	e7ee      	b.n	800090e <HAL_DMA_IRQHandler+0x52>
 8000930:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000934:	e7eb      	b.n	800090e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000936:	2502      	movs	r5, #2
 8000938:	4095      	lsls	r5, r2
 800093a:	4225      	tst	r5, r4
 800093c:	d035      	beq.n	80009aa <HAL_DMA_IRQHandler+0xee>
 800093e:	078d      	lsls	r5, r1, #30
 8000940:	d533      	bpl.n	80009aa <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	0694      	lsls	r4, r2, #26
 8000946:	d406      	bmi.n	8000956 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	f022 020a 	bic.w	r2, r2, #10
 800094e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000950:	2201      	movs	r2, #1
 8000952:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000956:	4a20      	ldr	r2, [pc, #128]	; (80009d8 <HAL_DMA_IRQHandler+0x11c>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d019      	beq.n	8000990 <HAL_DMA_IRQHandler+0xd4>
 800095c:	3214      	adds	r2, #20
 800095e:	4293      	cmp	r3, r2
 8000960:	d018      	beq.n	8000994 <HAL_DMA_IRQHandler+0xd8>
 8000962:	3214      	adds	r2, #20
 8000964:	4293      	cmp	r3, r2
 8000966:	d017      	beq.n	8000998 <HAL_DMA_IRQHandler+0xdc>
 8000968:	3214      	adds	r2, #20
 800096a:	4293      	cmp	r3, r2
 800096c:	d017      	beq.n	800099e <HAL_DMA_IRQHandler+0xe2>
 800096e:	3214      	adds	r2, #20
 8000970:	4293      	cmp	r3, r2
 8000972:	d017      	beq.n	80009a4 <HAL_DMA_IRQHandler+0xe8>
 8000974:	3214      	adds	r2, #20
 8000976:	4293      	cmp	r3, r2
 8000978:	bf0c      	ite	eq
 800097a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800097e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000982:	4a16      	ldr	r2, [pc, #88]	; (80009dc <HAL_DMA_IRQHandler+0x120>)
 8000984:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000986:	2300      	movs	r3, #0
 8000988:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800098c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800098e:	e7c1      	b.n	8000914 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000990:	2302      	movs	r3, #2
 8000992:	e7f6      	b.n	8000982 <HAL_DMA_IRQHandler+0xc6>
 8000994:	2320      	movs	r3, #32
 8000996:	e7f4      	b.n	8000982 <HAL_DMA_IRQHandler+0xc6>
 8000998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800099c:	e7f1      	b.n	8000982 <HAL_DMA_IRQHandler+0xc6>
 800099e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a2:	e7ee      	b.n	8000982 <HAL_DMA_IRQHandler+0xc6>
 80009a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009a8:	e7eb      	b.n	8000982 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80009aa:	2508      	movs	r5, #8
 80009ac:	4095      	lsls	r5, r2
 80009ae:	4225      	tst	r5, r4
 80009b0:	d00f      	beq.n	80009d2 <HAL_DMA_IRQHandler+0x116>
 80009b2:	0709      	lsls	r1, r1, #28
 80009b4:	d50d      	bpl.n	80009d2 <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009b6:	6819      	ldr	r1, [r3, #0]
 80009b8:	f021 010e 	bic.w	r1, r1, #14
 80009bc:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009be:	2301      	movs	r3, #1
 80009c0:	fa03 f202 	lsl.w	r2, r3, r2
 80009c4:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80009c6:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80009c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009cc:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80009ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80009d0:	e7a0      	b.n	8000914 <HAL_DMA_IRQHandler+0x58>
}
 80009d2:	bc70      	pop	{r4, r5, r6}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40020008 	.word	0x40020008
 80009dc:	40020000 	.word	0x40020000

080009e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009e4:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80009e6:	4616      	mov	r6, r2
 80009e8:	4b64      	ldr	r3, [pc, #400]	; (8000b7c <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ea:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8000b8c <HAL_GPIO_Init+0x1ac>
 80009ee:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8000b90 <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f2:	680d      	ldr	r5, [r1, #0]
 80009f4:	fa35 f406 	lsrs.w	r4, r5, r6
 80009f8:	d102      	bne.n	8000a00 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80009fa:	b003      	add	sp, #12
 80009fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000a00:	f04f 0801 	mov.w	r8, #1
 8000a04:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a08:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8000a0c:	ea38 0505 	bics.w	r5, r8, r5
 8000a10:	d17c      	bne.n	8000b0c <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8000a12:	684d      	ldr	r5, [r1, #4]
 8000a14:	2d03      	cmp	r5, #3
 8000a16:	d807      	bhi.n	8000a28 <HAL_GPIO_Init+0x48>
 8000a18:	3d01      	subs	r5, #1
 8000a1a:	2d02      	cmp	r5, #2
 8000a1c:	f200 8088 	bhi.w	8000b30 <HAL_GPIO_Init+0x150>
 8000a20:	e8df f005 	tbb	[pc, r5]
 8000a24:	9b96      	.short	0x9b96
 8000a26:	a1          	.byte	0xa1
 8000a27:	00          	.byte	0x00
 8000a28:	2d12      	cmp	r5, #18
 8000a2a:	f000 8099 	beq.w	8000b60 <HAL_GPIO_Init+0x180>
 8000a2e:	d86f      	bhi.n	8000b10 <HAL_GPIO_Init+0x130>
 8000a30:	2d11      	cmp	r5, #17
 8000a32:	f000 808f 	beq.w	8000b54 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a36:	2cff      	cmp	r4, #255	; 0xff
 8000a38:	bf98      	it	ls
 8000a3a:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a3c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a40:	bf88      	it	hi
 8000a42:	f100 0a04 	addhi.w	sl, r0, #4
 8000a46:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a4a:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a4e:	bf88      	it	hi
 8000a50:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a52:	fa09 fb05 	lsl.w	fp, r9, r5
 8000a56:	ea28 080b 	bic.w	r8, r8, fp
 8000a5a:	fa02 f505 	lsl.w	r5, r2, r5
 8000a5e:	ea48 0505 	orr.w	r5, r8, r5
 8000a62:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a66:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000a6a:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000a6e:	d04d      	beq.n	8000b0c <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a70:	4f43      	ldr	r7, [pc, #268]	; (8000b80 <HAL_GPIO_Init+0x1a0>)
 8000a72:	f026 0803 	bic.w	r8, r6, #3
 8000a76:	69bd      	ldr	r5, [r7, #24]
 8000a78:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000a7c:	f045 0501 	orr.w	r5, r5, #1
 8000a80:	61bd      	str	r5, [r7, #24]
 8000a82:	69bd      	ldr	r5, [r7, #24]
 8000a84:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000a88:	f005 0501 	and.w	r5, r5, #1
 8000a8c:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a8e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a92:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a94:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000a98:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a9c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000aa0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000aa4:	4d37      	ldr	r5, [pc, #220]	; (8000b84 <HAL_GPIO_Init+0x1a4>)
 8000aa6:	42a8      	cmp	r0, r5
 8000aa8:	d061      	beq.n	8000b6e <HAL_GPIO_Init+0x18e>
 8000aaa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000aae:	42a8      	cmp	r0, r5
 8000ab0:	d05f      	beq.n	8000b72 <HAL_GPIO_Init+0x192>
 8000ab2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ab6:	42a8      	cmp	r0, r5
 8000ab8:	d05d      	beq.n	8000b76 <HAL_GPIO_Init+0x196>
 8000aba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000abe:	42a8      	cmp	r0, r5
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2503      	moveq	r5, #3
 8000ac4:	2504      	movne	r5, #4
 8000ac6:	fa05 f50b 	lsl.w	r5, r5, fp
 8000aca:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000ace:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000ad2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000ad8:	bf14      	ite	ne
 8000ada:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000adc:	43a5      	biceq	r5, r4
 8000ade:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000ae0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000ae6:	bf14      	ite	ne
 8000ae8:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aea:	43a5      	biceq	r5, r4
 8000aec:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aee:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000af4:	bf14      	ite	ne
 8000af6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000af8:	43a5      	biceq	r5, r4
 8000afa:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000afc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000afe:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b02:	bf14      	ite	ne
 8000b04:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b06:	ea25 0404 	biceq.w	r4, r5, r4
 8000b0a:	60dc      	str	r4, [r3, #12]
	position++;
 8000b0c:	3601      	adds	r6, #1
 8000b0e:	e770      	b.n	80009f2 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000b10:	4f1d      	ldr	r7, [pc, #116]	; (8000b88 <HAL_GPIO_Init+0x1a8>)
 8000b12:	42bd      	cmp	r5, r7
 8000b14:	d00c      	beq.n	8000b30 <HAL_GPIO_Init+0x150>
 8000b16:	d817      	bhi.n	8000b48 <HAL_GPIO_Init+0x168>
 8000b18:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000b94 <HAL_GPIO_Init+0x1b4>
 8000b1c:	454d      	cmp	r5, r9
 8000b1e:	d007      	beq.n	8000b30 <HAL_GPIO_Init+0x150>
 8000b20:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8000b24:	454d      	cmp	r5, r9
 8000b26:	d003      	beq.n	8000b30 <HAL_GPIO_Init+0x150>
 8000b28:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000b2c:	454d      	cmp	r5, r9
 8000b2e:	d182      	bne.n	8000a36 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b30:	688a      	ldr	r2, [r1, #8]
 8000b32:	b1d2      	cbz	r2, 8000b6a <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b34:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000b36:	bf08      	it	eq
 8000b38:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b3c:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000b40:	bf18      	it	ne
 8000b42:	f8c0 8014 	strne.w	r8, [r0, #20]
 8000b46:	e776      	b.n	8000a36 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8000b48:	4565      	cmp	r5, ip
 8000b4a:	d0f1      	beq.n	8000b30 <HAL_GPIO_Init+0x150>
 8000b4c:	4575      	cmp	r5, lr
 8000b4e:	e7ee      	b.n	8000b2e <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b50:	68ca      	ldr	r2, [r1, #12]
          break;
 8000b52:	e770      	b.n	8000a36 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b54:	68ca      	ldr	r2, [r1, #12]
 8000b56:	3204      	adds	r2, #4
          break;
 8000b58:	e76d      	b.n	8000a36 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b5a:	68ca      	ldr	r2, [r1, #12]
 8000b5c:	3208      	adds	r2, #8
          break;
 8000b5e:	e76a      	b.n	8000a36 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b60:	68ca      	ldr	r2, [r1, #12]
 8000b62:	320c      	adds	r2, #12
          break;
 8000b64:	e767      	b.n	8000a36 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8000b66:	2200      	movs	r2, #0
 8000b68:	e765      	b.n	8000a36 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	e763      	b.n	8000a36 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b6e:	2500      	movs	r5, #0
 8000b70:	e7a9      	b.n	8000ac6 <HAL_GPIO_Init+0xe6>
 8000b72:	2501      	movs	r5, #1
 8000b74:	e7a7      	b.n	8000ac6 <HAL_GPIO_Init+0xe6>
 8000b76:	2502      	movs	r5, #2
 8000b78:	e7a5      	b.n	8000ac6 <HAL_GPIO_Init+0xe6>
 8000b7a:	bf00      	nop
 8000b7c:	40010400 	.word	0x40010400
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010800 	.word	0x40010800
 8000b88:	10220000 	.word	0x10220000
 8000b8c:	10310000 	.word	0x10310000
 8000b90:	10320000 	.word	0x10320000
 8000b94:	10120000 	.word	0x10120000

08000b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b9c:	4605      	mov	r5, r0
 8000b9e:	b338      	cbz	r0, 8000bf0 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ba0:	6803      	ldr	r3, [r0, #0]
 8000ba2:	07db      	lsls	r3, r3, #31
 8000ba4:	d410      	bmi.n	8000bc8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ba6:	682b      	ldr	r3, [r5, #0]
 8000ba8:	079f      	lsls	r7, r3, #30
 8000baa:	d45e      	bmi.n	8000c6a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bac:	682b      	ldr	r3, [r5, #0]
 8000bae:	0719      	lsls	r1, r3, #28
 8000bb0:	f100 8095 	bmi.w	8000cde <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bb4:	682b      	ldr	r3, [r5, #0]
 8000bb6:	075a      	lsls	r2, r3, #29
 8000bb8:	f100 80bf 	bmi.w	8000d3a <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bbc:	69e8      	ldr	r0, [r5, #28]
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	f040 812c 	bne.w	8000e1c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	e029      	b.n	8000c1c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bc8:	4c8f      	ldr	r4, [pc, #572]	; (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000bca:	6863      	ldr	r3, [r4, #4]
 8000bcc:	f003 030c 	and.w	r3, r3, #12
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d007      	beq.n	8000be4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bd4:	6863      	ldr	r3, [r4, #4]
 8000bd6:	f003 030c 	and.w	r3, r3, #12
 8000bda:	2b08      	cmp	r3, #8
 8000bdc:	d10a      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x5c>
 8000bde:	6863      	ldr	r3, [r4, #4]
 8000be0:	03de      	lsls	r6, r3, #15
 8000be2:	d507      	bpl.n	8000bf4 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be4:	6823      	ldr	r3, [r4, #0]
 8000be6:	039c      	lsls	r4, r3, #14
 8000be8:	d5dd      	bpl.n	8000ba6 <HAL_RCC_OscConfig+0xe>
 8000bea:	686b      	ldr	r3, [r5, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1da      	bne.n	8000ba6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	e013      	b.n	8000c1c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf4:	686b      	ldr	r3, [r5, #4]
 8000bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfa:	d112      	bne.n	8000c22 <HAL_RCC_OscConfig+0x8a>
 8000bfc:	6823      	ldr	r3, [r4, #0]
 8000bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c02:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c04:	f7ff faec 	bl	80001e0 <HAL_GetTick>
 8000c08:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c0a:	6823      	ldr	r3, [r4, #0]
 8000c0c:	0398      	lsls	r0, r3, #14
 8000c0e:	d4ca      	bmi.n	8000ba6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c10:	f7ff fae6 	bl	80001e0 <HAL_GetTick>
 8000c14:	1b80      	subs	r0, r0, r6
 8000c16:	2864      	cmp	r0, #100	; 0x64
 8000c18:	d9f7      	bls.n	8000c0a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8000c1a:	2003      	movs	r0, #3
}
 8000c1c:	b002      	add	sp, #8
 8000c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c22:	b99b      	cbnz	r3, 8000c4c <HAL_RCC_OscConfig+0xb4>
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c2a:	6023      	str	r3, [r4, #0]
 8000c2c:	6823      	ldr	r3, [r4, #0]
 8000c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c32:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c34:	f7ff fad4 	bl	80001e0 <HAL_GetTick>
 8000c38:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c3a:	6823      	ldr	r3, [r4, #0]
 8000c3c:	0399      	lsls	r1, r3, #14
 8000c3e:	d5b2      	bpl.n	8000ba6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c40:	f7ff face 	bl	80001e0 <HAL_GetTick>
 8000c44:	1b80      	subs	r0, r0, r6
 8000c46:	2864      	cmp	r0, #100	; 0x64
 8000c48:	d9f7      	bls.n	8000c3a <HAL_RCC_OscConfig+0xa2>
 8000c4a:	e7e6      	b.n	8000c1a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c50:	6823      	ldr	r3, [r4, #0]
 8000c52:	d103      	bne.n	8000c5c <HAL_RCC_OscConfig+0xc4>
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c58:	6023      	str	r3, [r4, #0]
 8000c5a:	e7cf      	b.n	8000bfc <HAL_RCC_OscConfig+0x64>
 8000c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c60:	6023      	str	r3, [r4, #0]
 8000c62:	6823      	ldr	r3, [r4, #0]
 8000c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c68:	e7cb      	b.n	8000c02 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c6a:	4c67      	ldr	r4, [pc, #412]	; (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000c6c:	6863      	ldr	r3, [r4, #4]
 8000c6e:	f013 0f0c 	tst.w	r3, #12
 8000c72:	d007      	beq.n	8000c84 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c74:	6863      	ldr	r3, [r4, #4]
 8000c76:	f003 030c 	and.w	r3, r3, #12
 8000c7a:	2b08      	cmp	r3, #8
 8000c7c:	d110      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x108>
 8000c7e:	6863      	ldr	r3, [r4, #4]
 8000c80:	03da      	lsls	r2, r3, #15
 8000c82:	d40d      	bmi.n	8000ca0 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c84:	6823      	ldr	r3, [r4, #0]
 8000c86:	079b      	lsls	r3, r3, #30
 8000c88:	d502      	bpl.n	8000c90 <HAL_RCC_OscConfig+0xf8>
 8000c8a:	692b      	ldr	r3, [r5, #16]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d1af      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c90:	6823      	ldr	r3, [r4, #0]
 8000c92:	696a      	ldr	r2, [r5, #20]
 8000c94:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c98:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c9c:	6023      	str	r3, [r4, #0]
 8000c9e:	e785      	b.n	8000bac <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ca0:	692a      	ldr	r2, [r5, #16]
 8000ca2:	4b5a      	ldr	r3, [pc, #360]	; (8000e0c <HAL_RCC_OscConfig+0x274>)
 8000ca4:	b16a      	cbz	r2, 8000cc2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000caa:	f7ff fa99 	bl	80001e0 <HAL_GetTick>
 8000cae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb0:	6823      	ldr	r3, [r4, #0]
 8000cb2:	079f      	lsls	r7, r3, #30
 8000cb4:	d4ec      	bmi.n	8000c90 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cb6:	f7ff fa93 	bl	80001e0 <HAL_GetTick>
 8000cba:	1b80      	subs	r0, r0, r6
 8000cbc:	2802      	cmp	r0, #2
 8000cbe:	d9f7      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x118>
 8000cc0:	e7ab      	b.n	8000c1a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8000cc2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fa8c 	bl	80001e0 <HAL_GetTick>
 8000cc8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	0798      	lsls	r0, r3, #30
 8000cce:	f57f af6d 	bpl.w	8000bac <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cd2:	f7ff fa85 	bl	80001e0 <HAL_GetTick>
 8000cd6:	1b80      	subs	r0, r0, r6
 8000cd8:	2802      	cmp	r0, #2
 8000cda:	d9f6      	bls.n	8000cca <HAL_RCC_OscConfig+0x132>
 8000cdc:	e79d      	b.n	8000c1a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cde:	69aa      	ldr	r2, [r5, #24]
 8000ce0:	4e49      	ldr	r6, [pc, #292]	; (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000ce2:	4b4b      	ldr	r3, [pc, #300]	; (8000e10 <HAL_RCC_OscConfig+0x278>)
 8000ce4:	b1da      	cbz	r2, 8000d1e <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cea:	f7ff fa79 	bl	80001e0 <HAL_GetTick>
 8000cee:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cf0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000cf2:	079b      	lsls	r3, r3, #30
 8000cf4:	d50d      	bpl.n	8000d12 <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000cf6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000cfa:	4b46      	ldr	r3, [pc, #280]	; (8000e14 <HAL_RCC_OscConfig+0x27c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d02:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000d04:	bf00      	nop
  }
  while (Delay --);
 8000d06:	9b01      	ldr	r3, [sp, #4]
 8000d08:	1e5a      	subs	r2, r3, #1
 8000d0a:	9201      	str	r2, [sp, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f9      	bne.n	8000d04 <HAL_RCC_OscConfig+0x16c>
 8000d10:	e750      	b.n	8000bb4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d12:	f7ff fa65 	bl	80001e0 <HAL_GetTick>
 8000d16:	1b00      	subs	r0, r0, r4
 8000d18:	2802      	cmp	r0, #2
 8000d1a:	d9e9      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x158>
 8000d1c:	e77d      	b.n	8000c1a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8000d1e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d20:	f7ff fa5e 	bl	80001e0 <HAL_GetTick>
 8000d24:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000d28:	079f      	lsls	r7, r3, #30
 8000d2a:	f57f af43 	bpl.w	8000bb4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d2e:	f7ff fa57 	bl	80001e0 <HAL_GetTick>
 8000d32:	1b00      	subs	r0, r0, r4
 8000d34:	2802      	cmp	r0, #2
 8000d36:	d9f6      	bls.n	8000d26 <HAL_RCC_OscConfig+0x18e>
 8000d38:	e76f      	b.n	8000c1a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d3a:	4c33      	ldr	r4, [pc, #204]	; (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000d3c:	69e3      	ldr	r3, [r4, #28]
 8000d3e:	00d8      	lsls	r0, r3, #3
 8000d40:	d424      	bmi.n	8000d8c <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 8000d42:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d44:	69e3      	ldr	r3, [r4, #28]
 8000d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	61e3      	str	r3, [r4, #28]
 8000d4c:	69e3      	ldr	r3, [r4, #28]
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d56:	4e30      	ldr	r6, [pc, #192]	; (8000e18 <HAL_RCC_OscConfig+0x280>)
 8000d58:	6833      	ldr	r3, [r6, #0]
 8000d5a:	05d9      	lsls	r1, r3, #23
 8000d5c:	d518      	bpl.n	8000d90 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d5e:	68eb      	ldr	r3, [r5, #12]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d126      	bne.n	8000db2 <HAL_RCC_OscConfig+0x21a>
 8000d64:	6a23      	ldr	r3, [r4, #32]
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000d6c:	f7ff fa38 	bl	80001e0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d70:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d74:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d76:	6a23      	ldr	r3, [r4, #32]
 8000d78:	079b      	lsls	r3, r3, #30
 8000d7a:	d53f      	bpl.n	8000dfc <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 8000d7c:	2f00      	cmp	r7, #0
 8000d7e:	f43f af1d 	beq.w	8000bbc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d82:	69e3      	ldr	r3, [r4, #28]
 8000d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d88:	61e3      	str	r3, [r4, #28]
 8000d8a:	e717      	b.n	8000bbc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	e7e2      	b.n	8000d56 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d90:	6833      	ldr	r3, [r6, #0]
 8000d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d96:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000d98:	f7ff fa22 	bl	80001e0 <HAL_GetTick>
 8000d9c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9e:	6833      	ldr	r3, [r6, #0]
 8000da0:	05da      	lsls	r2, r3, #23
 8000da2:	d4dc      	bmi.n	8000d5e <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000da4:	f7ff fa1c 	bl	80001e0 <HAL_GetTick>
 8000da8:	eba0 0008 	sub.w	r0, r0, r8
 8000dac:	2864      	cmp	r0, #100	; 0x64
 8000dae:	d9f6      	bls.n	8000d9e <HAL_RCC_OscConfig+0x206>
 8000db0:	e733      	b.n	8000c1a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000db2:	b9ab      	cbnz	r3, 8000de0 <HAL_RCC_OscConfig+0x248>
 8000db4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000db6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dba:	f023 0301 	bic.w	r3, r3, #1
 8000dbe:	6223      	str	r3, [r4, #32]
 8000dc0:	6a23      	ldr	r3, [r4, #32]
 8000dc2:	f023 0304 	bic.w	r3, r3, #4
 8000dc6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000dc8:	f7ff fa0a 	bl	80001e0 <HAL_GetTick>
 8000dcc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dce:	6a23      	ldr	r3, [r4, #32]
 8000dd0:	0798      	lsls	r0, r3, #30
 8000dd2:	d5d3      	bpl.n	8000d7c <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dd4:	f7ff fa04 	bl	80001e0 <HAL_GetTick>
 8000dd8:	1b80      	subs	r0, r0, r6
 8000dda:	4540      	cmp	r0, r8
 8000ddc:	d9f7      	bls.n	8000dce <HAL_RCC_OscConfig+0x236>
 8000dde:	e71c      	b.n	8000c1a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de0:	2b05      	cmp	r3, #5
 8000de2:	6a23      	ldr	r3, [r4, #32]
 8000de4:	d103      	bne.n	8000dee <HAL_RCC_OscConfig+0x256>
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	6223      	str	r3, [r4, #32]
 8000dec:	e7ba      	b.n	8000d64 <HAL_RCC_OscConfig+0x1cc>
 8000dee:	f023 0301 	bic.w	r3, r3, #1
 8000df2:	6223      	str	r3, [r4, #32]
 8000df4:	6a23      	ldr	r3, [r4, #32]
 8000df6:	f023 0304 	bic.w	r3, r3, #4
 8000dfa:	e7b6      	b.n	8000d6a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dfc:	f7ff f9f0 	bl	80001e0 <HAL_GetTick>
 8000e00:	1b80      	subs	r0, r0, r6
 8000e02:	4540      	cmp	r0, r8
 8000e04:	d9b7      	bls.n	8000d76 <HAL_RCC_OscConfig+0x1de>
 8000e06:	e708      	b.n	8000c1a <HAL_RCC_OscConfig+0x82>
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	42420000 	.word	0x42420000
 8000e10:	42420480 	.word	0x42420480
 8000e14:	20000008 	.word	0x20000008
 8000e18:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <HAL_RCC_OscConfig+0x330>)
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	461c      	mov	r4, r3
 8000e22:	f002 020c 	and.w	r2, r2, #12
 8000e26:	2a08      	cmp	r2, #8
 8000e28:	d03d      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	4e27      	ldr	r6, [pc, #156]	; (8000ecc <HAL_RCC_OscConfig+0x334>)
 8000e2e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000e30:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e32:	d12b      	bne.n	8000e8c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000e34:	f7ff f9d4 	bl	80001e0 <HAL_GetTick>
 8000e38:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e3a:	6823      	ldr	r3, [r4, #0]
 8000e3c:	0199      	lsls	r1, r3, #6
 8000e3e:	d41f      	bmi.n	8000e80 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e40:	6a2b      	ldr	r3, [r5, #32]
 8000e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e46:	d105      	bne.n	8000e54 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e48:	6862      	ldr	r2, [r4, #4]
 8000e4a:	68a9      	ldr	r1, [r5, #8]
 8000e4c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000e50:	430a      	orrs	r2, r1
 8000e52:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e54:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000e56:	6862      	ldr	r2, [r4, #4]
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e62:	2301      	movs	r3, #1
 8000e64:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000e66:	f7ff f9bb 	bl	80001e0 <HAL_GetTick>
 8000e6a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e6c:	6823      	ldr	r3, [r4, #0]
 8000e6e:	019a      	lsls	r2, r3, #6
 8000e70:	f53f aea8 	bmi.w	8000bc4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e74:	f7ff f9b4 	bl	80001e0 <HAL_GetTick>
 8000e78:	1b40      	subs	r0, r0, r5
 8000e7a:	2802      	cmp	r0, #2
 8000e7c:	d9f6      	bls.n	8000e6c <HAL_RCC_OscConfig+0x2d4>
 8000e7e:	e6cc      	b.n	8000c1a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e80:	f7ff f9ae 	bl	80001e0 <HAL_GetTick>
 8000e84:	1bc0      	subs	r0, r0, r7
 8000e86:	2802      	cmp	r0, #2
 8000e88:	d9d7      	bls.n	8000e3a <HAL_RCC_OscConfig+0x2a2>
 8000e8a:	e6c6      	b.n	8000c1a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000e8c:	f7ff f9a8 	bl	80001e0 <HAL_GetTick>
 8000e90:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	019b      	lsls	r3, r3, #6
 8000e96:	f57f ae95 	bpl.w	8000bc4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e9a:	f7ff f9a1 	bl	80001e0 <HAL_GetTick>
 8000e9e:	1b40      	subs	r0, r0, r5
 8000ea0:	2802      	cmp	r0, #2
 8000ea2:	d9f6      	bls.n	8000e92 <HAL_RCC_OscConfig+0x2fa>
 8000ea4:	e6b9      	b.n	8000c1a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ea6:	2801      	cmp	r0, #1
 8000ea8:	f43f aeb8 	beq.w	8000c1c <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8000eac:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eae:	6a2a      	ldr	r2, [r5, #32]
 8000eb0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000eb4:	4291      	cmp	r1, r2
 8000eb6:	f47f ae9b 	bne.w	8000bf0 <HAL_RCC_OscConfig+0x58>
 8000eba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ebc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	f43f ae7f 	beq.w	8000bc4 <HAL_RCC_OscConfig+0x2c>
 8000ec6:	e693      	b.n	8000bf0 <HAL_RCC_OscConfig+0x58>
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	42420060 	.word	0x42420060

08000ed0 <HAL_RCC_GetSysClockFreq>:
{
 8000ed0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000ed4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ed6:	ac02      	add	r4, sp, #8
 8000ed8:	f103 0510 	add.w	r5, r3, #16
 8000edc:	4622      	mov	r2, r4
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	6859      	ldr	r1, [r3, #4]
 8000ee2:	3308      	adds	r3, #8
 8000ee4:	c203      	stmia	r2!, {r0, r1}
 8000ee6:	42ab      	cmp	r3, r5
 8000ee8:	4614      	mov	r4, r2
 8000eea:	d1f7      	bne.n	8000edc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000eec:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8000ef0:	4911      	ldr	r1, [pc, #68]	; (8000f38 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ef2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000ef6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000ef8:	f003 020c 	and.w	r2, r3, #12
 8000efc:	2a08      	cmp	r2, #8
 8000efe:	d117      	bne.n	8000f30 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f00:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000f04:	a806      	add	r0, sp, #24
 8000f06:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f08:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f0a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f0e:	d50c      	bpl.n	8000f2a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f10:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f12:	480a      	ldr	r0, [pc, #40]	; (8000f3c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f14:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f18:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f1a:	aa06      	add	r2, sp, #24
 8000f1c:	4413      	add	r3, r2
 8000f1e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f22:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000f26:	b007      	add	sp, #28
 8000f28:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_RCC_GetSysClockFreq+0x70>)
 8000f2c:	4350      	muls	r0, r2
 8000f2e:	e7fa      	b.n	8000f26 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8000f32:	e7f8      	b.n	8000f26 <HAL_RCC_GetSysClockFreq+0x56>
 8000f34:	08002120 	.word	0x08002120
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	007a1200 	.word	0x007a1200
 8000f40:	003d0900 	.word	0x003d0900

08000f44 <HAL_RCC_ClockConfig>:
{
 8000f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f48:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	b910      	cbnz	r0, 8000f54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000f4e:	2001      	movs	r0, #1
}
 8000f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f54:	4a44      	ldr	r2, [pc, #272]	; (8001068 <HAL_RCC_ClockConfig+0x124>)
 8000f56:	6813      	ldr	r3, [r2, #0]
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d328      	bcc.n	8000fb2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f60:	6821      	ldr	r1, [r4, #0]
 8000f62:	078e      	lsls	r6, r1, #30
 8000f64:	d430      	bmi.n	8000fc8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f66:	07ca      	lsls	r2, r1, #31
 8000f68:	d443      	bmi.n	8000ff2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f6a:	4a3f      	ldr	r2, [pc, #252]	; (8001068 <HAL_RCC_ClockConfig+0x124>)
 8000f6c:	6813      	ldr	r3, [r2, #0]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	42ab      	cmp	r3, r5
 8000f74:	d865      	bhi.n	8001042 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f76:	6822      	ldr	r2, [r4, #0]
 8000f78:	4d3c      	ldr	r5, [pc, #240]	; (800106c <HAL_RCC_ClockConfig+0x128>)
 8000f7a:	f012 0f04 	tst.w	r2, #4
 8000f7e:	d16c      	bne.n	800105a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f80:	0713      	lsls	r3, r2, #28
 8000f82:	d506      	bpl.n	8000f92 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f84:	686b      	ldr	r3, [r5, #4]
 8000f86:	6922      	ldr	r2, [r4, #16]
 8000f88:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f90:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f92:	f7ff ff9d 	bl	8000ed0 <HAL_RCC_GetSysClockFreq>
 8000f96:	686b      	ldr	r3, [r5, #4]
 8000f98:	4a35      	ldr	r2, [pc, #212]	; (8001070 <HAL_RCC_ClockConfig+0x12c>)
 8000f9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f9e:	5cd3      	ldrb	r3, [r2, r3]
 8000fa0:	40d8      	lsrs	r0, r3
 8000fa2:	4b34      	ldr	r3, [pc, #208]	; (8001074 <HAL_RCC_ClockConfig+0x130>)
 8000fa4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000fa6:	4b34      	ldr	r3, [pc, #208]	; (8001078 <HAL_RCC_ClockConfig+0x134>)
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	f7ff f8d7 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 8000fae:	2000      	movs	r0, #0
 8000fb0:	e7ce      	b.n	8000f50 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fb2:	6813      	ldr	r3, [r2, #0]
 8000fb4:	f023 0307 	bic.w	r3, r3, #7
 8000fb8:	430b      	orrs	r3, r1
 8000fba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fbc:	6813      	ldr	r3, [r2, #0]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d1c3      	bne.n	8000f4e <HAL_RCC_ClockConfig+0xa>
 8000fc6:	e7cb      	b.n	8000f60 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc8:	4b28      	ldr	r3, [pc, #160]	; (800106c <HAL_RCC_ClockConfig+0x128>)
 8000fca:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fce:	bf1e      	ittt	ne
 8000fd0:	685a      	ldrne	r2, [r3, #4]
 8000fd2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000fd6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fd8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fda:	bf42      	ittt	mi
 8000fdc:	685a      	ldrmi	r2, [r3, #4]
 8000fde:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000fe2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	68a0      	ldr	r0, [r4, #8]
 8000fe8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000fec:	4302      	orrs	r2, r0
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	e7b9      	b.n	8000f66 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ff2:	6862      	ldr	r2, [r4, #4]
 8000ff4:	4e1d      	ldr	r6, [pc, #116]	; (800106c <HAL_RCC_ClockConfig+0x128>)
 8000ff6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ffa:	d11a      	bne.n	8001032 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001000:	d0a5      	beq.n	8000f4e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001002:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001004:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001008:	f023 0303 	bic.w	r3, r3, #3
 800100c:	4313      	orrs	r3, r2
 800100e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001010:	f7ff f8e6 	bl	80001e0 <HAL_GetTick>
 8001014:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001016:	6873      	ldr	r3, [r6, #4]
 8001018:	6862      	ldr	r2, [r4, #4]
 800101a:	f003 030c 	and.w	r3, r3, #12
 800101e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001022:	d0a2      	beq.n	8000f6a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001024:	f7ff f8dc 	bl	80001e0 <HAL_GetTick>
 8001028:	1bc0      	subs	r0, r0, r7
 800102a:	4540      	cmp	r0, r8
 800102c:	d9f3      	bls.n	8001016 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800102e:	2003      	movs	r0, #3
 8001030:	e78e      	b.n	8000f50 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001032:	2a02      	cmp	r2, #2
 8001034:	d102      	bne.n	800103c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001036:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800103a:	e7e1      	b.n	8001000 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103c:	f013 0f02 	tst.w	r3, #2
 8001040:	e7de      	b.n	8001000 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001042:	6813      	ldr	r3, [r2, #0]
 8001044:	f023 0307 	bic.w	r3, r3, #7
 8001048:	432b      	orrs	r3, r5
 800104a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800104c:	6813      	ldr	r3, [r2, #0]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	42ab      	cmp	r3, r5
 8001054:	f47f af7b 	bne.w	8000f4e <HAL_RCC_ClockConfig+0xa>
 8001058:	e78d      	b.n	8000f76 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800105a:	686b      	ldr	r3, [r5, #4]
 800105c:	68e1      	ldr	r1, [r4, #12]
 800105e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001062:	430b      	orrs	r3, r1
 8001064:	606b      	str	r3, [r5, #4]
 8001066:	e78b      	b.n	8000f80 <HAL_RCC_ClockConfig+0x3c>
 8001068:	40022000 	.word	0x40022000
 800106c:	40021000 	.word	0x40021000
 8001070:	08002139 	.word	0x08002139
 8001074:	20000008 	.word	0x20000008
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <HAL_RCC_GetPCLK1Freq+0x14>)
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001086:	5cd3      	ldrb	r3, [r2, r3]
 8001088:	4a03      	ldr	r2, [pc, #12]	; (8001098 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800108a:	6810      	ldr	r0, [r2, #0]
}
 800108c:	40d8      	lsrs	r0, r3
 800108e:	4770      	bx	lr
 8001090:	40021000 	.word	0x40021000
 8001094:	08002149 	.word	0x08002149
 8001098:	20000008 	.word	0x20000008

0800109c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80010a6:	5cd3      	ldrb	r3, [r2, r3]
 80010a8:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80010aa:	6810      	ldr	r0, [r2, #0]
}
 80010ac:	40d8      	lsrs	r0, r3
 80010ae:	4770      	bx	lr
 80010b0:	40021000 	.word	0x40021000
 80010b4:	08002149 	.word	0x08002149
 80010b8:	20000008 	.word	0x20000008

080010bc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010bc:	6803      	ldr	r3, [r0, #0]
{
 80010be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010c2:	07d9      	lsls	r1, r3, #31
{
 80010c4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010c6:	d520      	bpl.n	800110a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010c8:	4c35      	ldr	r4, [pc, #212]	; (80011a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80010ca:	69e3      	ldr	r3, [r4, #28]
 80010cc:	00da      	lsls	r2, r3, #3
 80010ce:	d432      	bmi.n	8001136 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80010d0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	69e3      	ldr	r3, [r4, #28]
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	61e3      	str	r3, [r4, #28]
 80010da:	69e3      	ldr	r3, [r4, #28]
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e4:	4e2f      	ldr	r6, [pc, #188]	; (80011a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80010e6:	6833      	ldr	r3, [r6, #0]
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	d526      	bpl.n	800113a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80010ec:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010ee:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80010f2:	d136      	bne.n	8001162 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80010f4:	6a23      	ldr	r3, [r4, #32]
 80010f6:	686a      	ldr	r2, [r5, #4]
 80010f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010fc:	4313      	orrs	r3, r2
 80010fe:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001100:	b11f      	cbz	r7, 800110a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001102:	69e3      	ldr	r3, [r4, #28]
 8001104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001108:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800110a:	6828      	ldr	r0, [r5, #0]
 800110c:	0783      	lsls	r3, r0, #30
 800110e:	d506      	bpl.n	800111e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001110:	4923      	ldr	r1, [pc, #140]	; (80011a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001112:	68ab      	ldr	r3, [r5, #8]
 8001114:	684a      	ldr	r2, [r1, #4]
 8001116:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800111a:	431a      	orrs	r2, r3
 800111c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800111e:	f010 0010 	ands.w	r0, r0, #16
 8001122:	d01b      	beq.n	800115c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001124:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001126:	68e9      	ldr	r1, [r5, #12]
 8001128:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800112a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800112c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001130:	430b      	orrs	r3, r1
 8001132:	6053      	str	r3, [r2, #4]
 8001134:	e012      	b.n	800115c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8001136:	2700      	movs	r7, #0
 8001138:	e7d4      	b.n	80010e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800113a:	6833      	ldr	r3, [r6, #0]
 800113c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001140:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001142:	f7ff f84d 	bl	80001e0 <HAL_GetTick>
 8001146:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001148:	6833      	ldr	r3, [r6, #0]
 800114a:	05d8      	lsls	r0, r3, #23
 800114c:	d4ce      	bmi.n	80010ec <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800114e:	f7ff f847 	bl	80001e0 <HAL_GetTick>
 8001152:	eba0 0008 	sub.w	r0, r0, r8
 8001156:	2864      	cmp	r0, #100	; 0x64
 8001158:	d9f6      	bls.n	8001148 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800115a:	2003      	movs	r0, #3
}
 800115c:	b002      	add	sp, #8
 800115e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001162:	686a      	ldr	r2, [r5, #4]
 8001164:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001168:	429a      	cmp	r2, r3
 800116a:	d0c3      	beq.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800116c:	2001      	movs	r0, #1
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001170:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001172:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001174:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001176:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800117a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800117c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800117e:	07d9      	lsls	r1, r3, #31
 8001180:	d5b8      	bpl.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001182:	f7ff f82d 	bl	80001e0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001186:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800118a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800118c:	6a23      	ldr	r3, [r4, #32]
 800118e:	079a      	lsls	r2, r3, #30
 8001190:	d4b0      	bmi.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001192:	f7ff f825 	bl	80001e0 <HAL_GetTick>
 8001196:	1b80      	subs	r0, r0, r6
 8001198:	4540      	cmp	r0, r8
 800119a:	d9f7      	bls.n	800118c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800119c:	e7dd      	b.n	800115a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40007000 	.word	0x40007000
 80011a8:	42420440 	.word	0x42420440

080011ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80011ac:	4602      	mov	r2, r0
 80011ae:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011b0:	4b34      	ldr	r3, [pc, #208]	; (8001284 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
{
 80011b2:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011b4:	ad02      	add	r5, sp, #8
 80011b6:	f103 0610 	add.w	r6, r3, #16
 80011ba:	462c      	mov	r4, r5
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	6859      	ldr	r1, [r3, #4]
 80011c0:	3308      	adds	r3, #8
 80011c2:	c403      	stmia	r4!, {r0, r1}
 80011c4:	42b3      	cmp	r3, r6
 80011c6:	4625      	mov	r5, r4
 80011c8:	d1f7      	bne.n	80011ba <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011ca:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80011ce:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011d0:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 80011d4:	d049      	beq.n	800126a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80011d6:	2a10      	cmp	r2, #16
 80011d8:	d003      	beq.n	80011e2 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 80011da:	2a01      	cmp	r2, #1
 80011dc:	d026      	beq.n	800122c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
  uint32_t temp_reg = 0U, frequency = 0U;
 80011de:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 80011e0:	e038      	b.n	8001254 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      temp_reg = RCC->CFGR;
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 80011e4:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80011ec:	d032      	beq.n	8001254 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011ee:	f3c1 4283 	ubfx	r2, r1, #18, #4
 80011f2:	a806      	add	r0, sp, #24
 80011f4:	4402      	add	r2, r0
 80011f6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011fa:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011fc:	bf41      	itttt	mi
 80011fe:	685a      	ldrmi	r2, [r3, #4]
 8001200:	a906      	addmi	r1, sp, #24
 8001202:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001206:	1852      	addmi	r2, r2, r1
 8001208:	bf44      	itt	mi
 800120a:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800120e:	4a1f      	ldrmi	r2, [pc, #124]	; (800128c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001210:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001212:	bf4c      	ite	mi
 8001214:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001218:	4a1d      	ldrpl	r2, [pc, #116]	; (8001290 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800121a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800121c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001220:	d418      	bmi.n	8001254 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          frequency = (pllclk * 2) / 3;
 8001222:	2303      	movs	r3, #3
 8001224:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001226:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800122a:	e013      	b.n	8001254 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800122c:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8001230:	4a15      	ldr	r2, [pc, #84]	; (8001288 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8001232:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001234:	4019      	ands	r1, r3
 8001236:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800123a:	d01f      	beq.n	800127c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800123c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001244:	d108      	bne.n	8001258 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        frequency = LSI_VALUE;
 8001246:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800124a:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800124c:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8001250:	bf18      	it	ne
 8001252:	4618      	movne	r0, r3
}
 8001254:	b006      	add	sp, #24
 8001256:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800125c:	d1bf      	bne.n	80011de <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 800125e:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001260:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001264:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8001268:	e7f2      	b.n	8001250 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800126a:	f7ff ff17 	bl	800109c <HAL_RCC_GetPCLK2Freq>
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001276:	3301      	adds	r3, #1
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	e7d4      	b.n	8001226 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSE_VALUE;
 800127c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001280:	e7e8      	b.n	8001254 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 8001282:	bf00      	nop
 8001284:	08002120 	.word	0x08002120
 8001288:	40021000 	.word	0x40021000
 800128c:	007a1200 	.word	0x007a1200
 8001290:	003d0900 	.word	0x003d0900

08001294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001294:	b510      	push	{r4, lr}
 8001296:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001298:	6803      	ldr	r3, [r0, #0]
 800129a:	68c1      	ldr	r1, [r0, #12]
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80012a2:	430a      	orrs	r2, r1
 80012a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80012a6:	6882      	ldr	r2, [r0, #8]
 80012a8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80012aa:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80012ac:	4302      	orrs	r2, r0
 80012ae:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80012b0:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80012b4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80012b8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80012ba:	430a      	orrs	r2, r1
 80012bc:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80012be:	695a      	ldr	r2, [r3, #20]
 80012c0:	69a1      	ldr	r1, [r4, #24]
 80012c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80012c6:	430a      	orrs	r2, r1
 80012c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80012ca:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <UART_SetConfig+0x70>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d115      	bne.n	80012fc <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80012d0:	f7ff fee4 	bl	800109c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80012d4:	2319      	movs	r3, #25
 80012d6:	4343      	muls	r3, r0
 80012d8:	6862      	ldr	r2, [r4, #4]
 80012da:	6820      	ldr	r0, [r4, #0]
 80012dc:	0092      	lsls	r2, r2, #2
 80012de:	fbb3 f3f2 	udiv	r3, r3, r2
 80012e2:	2264      	movs	r2, #100	; 0x64
 80012e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80012e8:	fb02 3311 	mls	r3, r2, r1, r3
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	3332      	adds	r3, #50	; 0x32
 80012f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80012f4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80012f8:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80012fa:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80012fc:	f7ff febe 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 8001300:	e7e8      	b.n	80012d4 <UART_SetConfig+0x40>
 8001302:	bf00      	nop
 8001304:	40013800 	.word	0x40013800

08001308 <HAL_UART_Init>:
{
 8001308:	b510      	push	{r4, lr}
  if (huart == NULL)
 800130a:	4604      	mov	r4, r0
 800130c:	b340      	cbz	r0, 8001360 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800130e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001312:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001316:	b91b      	cbnz	r3, 8001320 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001318:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800131c:	f000 f9c2 	bl	80016a4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001320:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001322:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001324:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001328:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800132a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800132c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001330:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001332:	f7ff ffaf 	bl	8001294 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001336:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001338:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001342:	695a      	ldr	r2, [r3, #20]
 8001344:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001348:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001350:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001352:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001354:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001356:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800135a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800135e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001360:	2001      	movs	r0, #1
 8001362:	e7fc      	b.n	800135e <HAL_UART_Init+0x56>

08001364 <trans_to_usart_data>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void trans_to_usart_data(char *buf)
{
 8001364:	b510      	push	{r4, lr}
 8001366:	4604      	mov	r4, r0
	uint8_t len = strlen((char*)buf);
 8001368:	f7fe fef0 	bl	800014c <strlen>

	for(uint8_t i = 0; i < len; i++)
 800136c:	4623      	mov	r3, r4
 800136e:	b2c0      	uxtb	r0, r0
 8001370:	4a08      	ldr	r2, [pc, #32]	; (8001394 <trans_to_usart_data+0x30>)
 8001372:	4420      	add	r0, r4
 8001374:	4283      	cmp	r3, r0
 8001376:	d105      	bne.n	8001384 <trans_to_usart_data+0x20>
	{
	  while((USART3->SR & USART_SR_TXE) == 0){}
	  USART3->DR = buf[i];
	}

	while((USART3->SR & USART_SR_TXE) == 0){}
 8001378:	6813      	ldr	r3, [r2, #0]
 800137a:	061b      	lsls	r3, r3, #24
 800137c:	d5fc      	bpl.n	8001378 <trans_to_usart_data+0x14>
	USART3->DR = '\n';
 800137e:	230a      	movs	r3, #10
 8001380:	6053      	str	r3, [r2, #4]
}
 8001382:	bd10      	pop	{r4, pc}
	  while((USART3->SR & USART_SR_TXE) == 0){}
 8001384:	6811      	ldr	r1, [r2, #0]
 8001386:	0609      	lsls	r1, r1, #24
 8001388:	d5fc      	bpl.n	8001384 <trans_to_usart_data+0x20>
	  USART3->DR = buf[i];
 800138a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800138e:	6051      	str	r1, [r2, #4]
	for(uint8_t i = 0; i < len; i++)
 8001390:	e7f0      	b.n	8001374 <trans_to_usart_data+0x10>
 8001392:	bf00      	nop
 8001394:	40004800 	.word	0x40004800

08001398 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	if(hadc->Instance == ADC1)
 8001398:	6802      	ldr	r2, [r0, #0]
 800139a:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_ADC_ConvCpltCallback+0x10>)
 800139c:	429a      	cmp	r2, r3
	{
		adc_flag_full = 1;
 800139e:	bf02      	ittt	eq
 80013a0:	2201      	moveq	r2, #1
 80013a2:	4b02      	ldreq	r3, [pc, #8]	; (80013ac <HAL_ADC_ConvCpltCallback+0x14>)
 80013a4:	701a      	strbeq	r2, [r3, #0]
	}
}
 80013a6:	4770      	bx	lr
 80013a8:	40012400 	.word	0x40012400
 80013ac:	2000008c 	.word	0x2000008c

080013b0 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
	if(hadc->Instance == ADC1)
 80013b0:	6802      	ldr	r2, [r0, #0]
 80013b2:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_ADC_ConvHalfCpltCallback+0x10>)
 80013b4:	429a      	cmp	r2, r3
	{
		adc_flag_half = 1;
 80013b6:	bf02      	ittt	eq
 80013b8:	2201      	moveq	r2, #1
 80013ba:	4b02      	ldreq	r3, [pc, #8]	; (80013c4 <HAL_ADC_ConvHalfCpltCallback+0x14>)
 80013bc:	701a      	strbeq	r2, [r3, #0]
	}
}
 80013be:	4770      	bx	lr
 80013c0:	40012400 	.word	0x40012400
 80013c4:	2000008d 	.word	0x2000008d

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	2410      	movs	r4, #16
{
 80013cc:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	4622      	mov	r2, r4
 80013d0:	2100      	movs	r1, #0
 80013d2:	a80d      	add	r0, sp, #52	; 0x34
 80013d4:	f000 fa42 	bl	800185c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	2214      	movs	r2, #20
 80013da:	2100      	movs	r1, #0
 80013dc:	eb0d 0002 	add.w	r0, sp, r2
 80013e0:	f000 fa3c 	bl	800185c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e4:	4622      	mov	r2, r4
 80013e6:	2100      	movs	r1, #0
 80013e8:	a801      	add	r0, sp, #4
 80013ea:	f000 fa37 	bl	800185c <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ee:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013f6:	2500      	movs	r5, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013fc:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001400:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001404:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001406:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001408:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800140a:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	f7ff fbc4 	bl	8000b98 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001410:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001412:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001416:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800141a:	4621      	mov	r1, r4
 800141c:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141e:	e9cd 3508 	strd	r3, r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001422:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001424:	f7ff fd8e 	bl	8000f44 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800142c:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800142e:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001430:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001432:	f7ff fe43 	bl	80010bc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001436:	b015      	add	sp, #84	; 0x54
 8001438:	bd30      	pop	{r4, r5, pc}
	...

0800143c <main>:
{
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 8001440:	f7fe feb0 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8001444:	f7ff ffc0 	bl	80013c8 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001448:	4b56      	ldr	r3, [pc, #344]	; (80015a4 <main+0x168>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800144a:	2102      	movs	r1, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144c:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800144e:	200b      	movs	r0, #11
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001450:	f042 0220 	orr.w	r2, r2, #32
 8001454:	619a      	str	r2, [r3, #24]
 8001456:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 8001458:	4c53      	ldr	r4, [pc, #332]	; (80015a8 <main+0x16c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145a:	f002 0220 	and.w	r2, r2, #32
 800145e:	9203      	str	r2, [sp, #12]
 8001460:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	699a      	ldr	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001464:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	f042 0204 	orr.w	r2, r2, #4
 800146a:	619a      	str	r2, [r3, #24]
 800146c:	699a      	ldr	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800146e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	f002 0204 	and.w	r2, r2, #4
 8001474:	9204      	str	r2, [sp, #16]
 8001476:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	699a      	ldr	r2, [r3, #24]
  hadc1.Init.NbrOfConversion = 2;
 800147a:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147c:	f042 0208 	orr.w	r2, r2, #8
 8001480:	619a      	str	r2, [r3, #24]
 8001482:	699a      	ldr	r2, [r3, #24]
 8001484:	f002 0208 	and.w	r2, r2, #8
 8001488:	9205      	str	r2, [sp, #20]
 800148a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	615a      	str	r2, [r3, #20]
 8001494:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001496:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	9302      	str	r3, [sp, #8]
 800149e:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80014a0:	f7ff f94c 	bl	800073c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014a4:	200b      	movs	r0, #11
 80014a6:	f7ff f97b 	bl	80007a0 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 80014aa:	4b40      	ldr	r3, [pc, #256]	; (80015ac <main+0x170>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ac:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 80014ae:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b4:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b6:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014ba:	7326      	strb	r6, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014bc:	7525      	strb	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014be:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014c0:	6065      	str	r5, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014c2:	e9cd 5506 	strd	r5, r5, [sp, #24]
 80014c6:	9508      	str	r5, [sp, #32]
  hadc1.Init.NbrOfConversion = 2;
 80014c8:	6127      	str	r7, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ca:	f7ff f837 	bl	800053c <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80014ce:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d0:	4620      	mov	r0, r4
 80014d2:	a906      	add	r1, sp, #24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014d4:	e9cd 5606 	strd	r5, r6, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80014d8:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014da:	f7fe fec1 	bl	8000260 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014de:	4620      	mov	r0, r4
 80014e0:	a906      	add	r1, sp, #24
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e6:	f7fe febb 	bl	8000260 <HAL_ADC_ConfigChannel>
  huart3.Init.BaudRate = 115200;
 80014ea:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart3.Instance = USART3;
 80014ee:	4830      	ldr	r0, [pc, #192]	; (80015b0 <main+0x174>)
  huart3.Init.BaudRate = 115200;
 80014f0:	4930      	ldr	r1, [pc, #192]	; (80015b4 <main+0x178>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014f2:	e9c0 5502 	strd	r5, r5, [r0, #8]
  huart3.Init.BaudRate = 115200;
 80014f6:	e9c0 1300 	strd	r1, r3, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014fa:	230c      	movs	r3, #12
  huart3.Init.Parity = UART_PARITY_NONE;
 80014fc:	6105      	str	r5, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	e9c0 3505 	strd	r3, r5, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001502:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001504:	f7ff ff00 	bl	8001308 <HAL_UART_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff f895 	bl	8000638 <HAL_ADCEx_Calibration_Start>
  uint16_t adc_buf[COUNT_REQUEST] = {0,};
 800150e:	4629      	mov	r1, r5
 8001510:	2250      	movs	r2, #80	; 0x50
 8001512:	a806      	add	r0, sp, #24
 8001514:	f000 f9a2 	bl	800185c <memset>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, COUNT_REQUEST);
 8001518:	4620      	mov	r0, r4
 800151a:	2228      	movs	r2, #40	; 0x28
 800151c:	a906      	add	r1, sp, #24
 800151e:	f7fe ff59 	bl	80003d4 <HAL_ADC_Start_DMA>
	  if(adc_flag_full == 1)
 8001522:	4d25      	ldr	r5, [pc, #148]	; (80015b8 <main+0x17c>)
			snprintf(trans_str, 128, "%lu %lu", adc_ch_1, adc_ch_2);
 8001524:	4e25      	ldr	r6, [pc, #148]	; (80015bc <main+0x180>)
 8001526:	4c26      	ldr	r4, [pc, #152]	; (80015c0 <main+0x184>)
	  if(adc_flag_full == 1)
 8001528:	782b      	ldrb	r3, [r5, #0]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d11a      	bne.n	8001564 <main+0x128>
		  	adc_flag_full = 0;
 800152e:	2300      	movs	r3, #0
			adc_ch_2 = 0;
 8001530:	461a      	mov	r2, r3
			adc_ch_1 = 0;
 8001532:	4618      	mov	r0, r3
		  	adc_flag_full = 0;
 8001534:	702b      	strb	r3, [r5, #0]
			for(uint16_t i = 0; i < COUNT_REQUEST / (2 * 2); i++)
 8001536:	a906      	add	r1, sp, #24
				adc_ch_1 += ptr_adc_buf[CH_ADC * i + 0];
 8001538:	8d0f      	ldrh	r7, [r1, #40]	; 0x28
 800153a:	3301      	adds	r3, #1
 800153c:	4438      	add	r0, r7
				adc_ch_2 += ptr_adc_buf[CH_ADC * i + 1];
 800153e:	8d4f      	ldrh	r7, [r1, #42]	; 0x2a
			for(uint16_t i = 0; i < COUNT_REQUEST / (2 * 2); i++)
 8001540:	2b0a      	cmp	r3, #10
				adc_ch_2 += ptr_adc_buf[CH_ADC * i + 1];
 8001542:	443a      	add	r2, r7
			for(uint16_t i = 0; i < COUNT_REQUEST / (2 * 2); i++)
 8001544:	f101 0104 	add.w	r1, r1, #4
 8001548:	d1f6      	bne.n	8001538 <main+0xfc>
			adc_ch_2 = (adc_ch_2 / (COUNT_REQUEST / (2 * 2)));
 800154a:	fbb2 f2f3 	udiv	r2, r2, r3
			snprintf(trans_str, 128, "%lu %lu", adc_ch_1, adc_ch_2);
 800154e:	2180      	movs	r1, #128	; 0x80
 8001550:	fbb0 f3f3 	udiv	r3, r0, r3
 8001554:	9200      	str	r2, [sp, #0]
 8001556:	4620      	mov	r0, r4
 8001558:	4632      	mov	r2, r6
 800155a:	f000 f987 	bl	800186c <sniprintf>
			trans_to_usart_data(trans_str);
 800155e:	4620      	mov	r0, r4
 8001560:	f7ff ff00 	bl	8001364 <trans_to_usart_data>
	  if(adc_flag_half == 1)
 8001564:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <main+0x188>)
 8001566:	7813      	ldrb	r3, [r2, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d1dd      	bne.n	8001528 <main+0xec>
		    adc_flag_half = 0;
 800156c:	2300      	movs	r3, #0
			adc_ch_2 = 0;
 800156e:	4619      	mov	r1, r3
			adc_ch_1 = 0;
 8001570:	4618      	mov	r0, r3
		    adc_flag_half = 0;
 8001572:	7013      	strb	r3, [r2, #0]
			for(uint16_t i = 0; i < COUNT_REQUEST / (2 * 2); i++)
 8001574:	aa06      	add	r2, sp, #24
				adc_ch_1 += ptr_adc_buf[CH_ADC * i + 0];
 8001576:	8817      	ldrh	r7, [r2, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	4438      	add	r0, r7
				adc_ch_2 += ptr_adc_buf[CH_ADC * i + 1];
 800157c:	8857      	ldrh	r7, [r2, #2]
			for(uint16_t i = 0; i < COUNT_REQUEST / (2 * 2); i++)
 800157e:	2b0a      	cmp	r3, #10
				adc_ch_2 += ptr_adc_buf[CH_ADC * i + 1];
 8001580:	4439      	add	r1, r7
			for(uint16_t i = 0; i < COUNT_REQUEST / (2 * 2); i++)
 8001582:	f102 0204 	add.w	r2, r2, #4
 8001586:	d1f6      	bne.n	8001576 <main+0x13a>
			adc_ch_2 = (adc_ch_2 / (COUNT_REQUEST / (2 * 2)));
 8001588:	fbb1 f1f3 	udiv	r1, r1, r3
			snprintf(trans_str, 128, "%lu %lu", adc_ch_1, adc_ch_2);
 800158c:	4632      	mov	r2, r6
 800158e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001592:	9100      	str	r1, [sp, #0]
 8001594:	4620      	mov	r0, r4
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	f000 f968 	bl	800186c <sniprintf>
			trans_to_usart_data(trans_str);
 800159c:	4620      	mov	r0, r4
 800159e:	f7ff fee1 	bl	8001364 <trans_to_usart_data>
 80015a2:	e7c1      	b.n	8001528 <main+0xec>
 80015a4:	40021000 	.word	0x40021000
 80015a8:	20000164 	.word	0x20000164
 80015ac:	40012400 	.word	0x40012400
 80015b0:	20000120 	.word	0x20000120
 80015b4:	40004800 	.word	0x40004800
 80015b8:	2000008c 	.word	0x2000008c
 80015bc:	08002131 	.word	0x08002131
 80015c0:	2000008e 	.word	0x2000008e
 80015c4:	2000008d 	.word	0x2000008d

080015c8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015c8:	4770      	bx	lr
	...

080015cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_MspInit+0x3c>)
{
 80015ce:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80015d0:	699a      	ldr	r2, [r3, #24]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	619a      	str	r2, [r3, #24]
 80015d8:	699a      	ldr	r2, [r3, #24]
 80015da:	f002 0201 	and.w	r2, r2, #1
 80015de:	9200      	str	r2, [sp, #0]
 80015e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	69da      	ldr	r2, [r3, #28]
 80015e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015e8:	61da      	str	r2, [r3, #28]
 80015ea:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015f6:	6853      	ldr	r3, [r2, #4]
 80015f8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001600:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	b002      	add	sp, #8
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000

08001610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001610:	b530      	push	{r4, r5, lr}
 8001612:	4605      	mov	r5, r0
 8001614:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	2210      	movs	r2, #16
 8001618:	2100      	movs	r1, #0
 800161a:	a802      	add	r0, sp, #8
 800161c:	f000 f91e 	bl	800185c <memset>
  if(hadc->Instance==ADC1)
 8001620:	682a      	ldr	r2, [r5, #0]
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <HAL_ADC_MspInit+0x84>)
 8001624:	429a      	cmp	r2, r3
 8001626:	d133      	bne.n	8001690 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001628:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800162c:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	481a      	ldr	r0, [pc, #104]	; (8001698 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001634:	619a      	str	r2, [r3, #24]
 8001636:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800163a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800163e:	9200      	str	r2, [sp, #0]
 8001640:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001644:	4c15      	ldr	r4, [pc, #84]	; (800169c <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	f042 0204 	orr.w	r2, r2, #4
 800164a:	619a      	str	r2, [r3, #24]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001656:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001658:	e9cd 3302 	strd	r3, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f7ff f9c0 	bl	80009e0 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001660:	2300      	movs	r3, #0
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001664:	2180      	movs	r1, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001666:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800166a:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800166e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001672:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001676:	2220      	movs	r2, #32
 8001678:	e9c4 0205 	strd	r0, r2, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800167c:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800167e:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001680:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001682:	f7ff f8b1 	bl	80007e8 <HAL_DMA_Init>
 8001686:	b108      	cbz	r0, 800168c <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8001688:	f7ff ff9e 	bl	80015c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800168c:	622c      	str	r4, [r5, #32]
 800168e:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001690:	b007      	add	sp, #28
 8001692:	bd30      	pop	{r4, r5, pc}
 8001694:	40012400 	.word	0x40012400
 8001698:	40010800 	.word	0x40010800
 800169c:	20000194 	.word	0x20000194
 80016a0:	40020008 	.word	0x40020008

080016a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a4:	b510      	push	{r4, lr}
 80016a6:	4604      	mov	r4, r0
 80016a8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	2210      	movs	r2, #16
 80016ac:	2100      	movs	r1, #0
 80016ae:	a802      	add	r0, sp, #8
 80016b0:	f000 f8d4 	bl	800185c <memset>
  if(huart->Instance==USART3)
 80016b4:	6822      	ldr	r2, [r4, #0]
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <HAL_UART_MspInit+0x70>)
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d128      	bne.n	800170e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016bc:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80016c0:	69da      	ldr	r2, [r3, #28]
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	4815      	ldr	r0, [pc, #84]	; (8001718 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80016c4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016c8:	61da      	str	r2, [r3, #28]
 80016ca:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ce:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80016d2:	9200      	str	r2, [sp, #0]
 80016d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	699a      	ldr	r2, [r3, #24]
 80016d8:	f042 0208 	orr.w	r2, r2, #8
 80016dc:	619a      	str	r2, [r3, #24]
 80016de:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f7ff f973 	bl	80009e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016fe:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	4805      	ldr	r0, [pc, #20]	; (8001718 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001702:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f7ff f969 	bl	80009e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800170e:	b006      	add	sp, #24
 8001710:	bd10      	pop	{r4, pc}
 8001712:	bf00      	nop
 8001714:	40004800 	.word	0x40004800
 8001718:	40010c00 	.word	0x40010c00

0800171c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800171c:	4770      	bx	lr

0800171e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler>

08001720 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <MemManage_Handler>

08001722 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <BusFault_Handler>

08001724 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <UsageFault_Handler>

08001726 <SVC_Handler>:
 8001726:	4770      	bx	lr

08001728 <DebugMon_Handler>:
 8001728:	4770      	bx	lr

0800172a <PendSV_Handler>:
 800172a:	4770      	bx	lr

0800172c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172c:	f7fe bd4c 	b.w	80001c8 <HAL_IncTick>

08001730 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001730:	4801      	ldr	r0, [pc, #4]	; (8001738 <DMA1_Channel1_IRQHandler+0x8>)
 8001732:	f7ff b8c3 	b.w	80008bc <HAL_DMA_IRQHandler>
 8001736:	bf00      	nop
 8001738:	20000194 	.word	0x20000194

0800173c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800173c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <_sbrk+0x2c>)
{
 8001740:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001742:	6819      	ldr	r1, [r3, #0]
 8001744:	b909      	cbnz	r1, 800174a <_sbrk+0xe>
		heap_end = &end;
 8001746:	4909      	ldr	r1, [pc, #36]	; (800176c <_sbrk+0x30>)
 8001748:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800174a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800174c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800174e:	4402      	add	r2, r0
 8001750:	428a      	cmp	r2, r1
 8001752:	d906      	bls.n	8001762 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001754:	f000 f858 	bl	8001808 <__errno>
 8001758:	230c      	movs	r3, #12
 800175a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800175c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001760:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001762:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8001764:	e7fc      	b.n	8001760 <_sbrk+0x24>
 8001766:	bf00      	nop
 8001768:	20000110 	.word	0x20000110
 800176c:	200001e8 	.word	0x200001e8

08001770 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <SystemInit+0x40>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	f042 0201 	orr.w	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800177a:	6859      	ldr	r1, [r3, #4]
 800177c:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <SystemInit+0x44>)
 800177e:	400a      	ands	r2, r1
 8001780:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001788:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800178c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001794:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800179c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800179e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80017a2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80017a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <SystemInit+0x48>)
 80017aa:	609a      	str	r2, [r3, #8]
#endif 
}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	f8ff0000 	.word	0xf8ff0000
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80017bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80017be:	e003      	b.n	80017c8 <LoopCopyDataInit>

080017c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80017c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80017c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80017c6:	3104      	adds	r1, #4

080017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80017c8:	480a      	ldr	r0, [pc, #40]	; (80017f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80017cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017d0:	d3f6      	bcc.n	80017c0 <CopyDataInit>
  ldr r2, =_sbss
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80017d4:	e002      	b.n	80017dc <LoopFillZerobss>

080017d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80017d8:	f842 3b04 	str.w	r3, [r2], #4

080017dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80017de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80017e0:	d3f9      	bcc.n	80017d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017e2:	f7ff ffc5 	bl	8001770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017e6:	f000 f815 	bl	8001814 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ea:	f7ff fe27 	bl	800143c <main>
  bx lr
 80017ee:	4770      	bx	lr
  ldr r3, =_sidata
 80017f0:	0800218c 	.word	0x0800218c
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80017f8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80017fc:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001800:	200001e8 	.word	0x200001e8

08001804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC1_2_IRQHandler>
	...

08001808 <__errno>:
 8001808:	4b01      	ldr	r3, [pc, #4]	; (8001810 <__errno+0x8>)
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	2000000c 	.word	0x2000000c

08001814 <__libc_init_array>:
 8001814:	b570      	push	{r4, r5, r6, lr}
 8001816:	2600      	movs	r6, #0
 8001818:	4d0c      	ldr	r5, [pc, #48]	; (800184c <__libc_init_array+0x38>)
 800181a:	4c0d      	ldr	r4, [pc, #52]	; (8001850 <__libc_init_array+0x3c>)
 800181c:	1b64      	subs	r4, r4, r5
 800181e:	10a4      	asrs	r4, r4, #2
 8001820:	42a6      	cmp	r6, r4
 8001822:	d109      	bne.n	8001838 <__libc_init_array+0x24>
 8001824:	f000 fc70 	bl	8002108 <_init>
 8001828:	2600      	movs	r6, #0
 800182a:	4d0a      	ldr	r5, [pc, #40]	; (8001854 <__libc_init_array+0x40>)
 800182c:	4c0a      	ldr	r4, [pc, #40]	; (8001858 <__libc_init_array+0x44>)
 800182e:	1b64      	subs	r4, r4, r5
 8001830:	10a4      	asrs	r4, r4, #2
 8001832:	42a6      	cmp	r6, r4
 8001834:	d105      	bne.n	8001842 <__libc_init_array+0x2e>
 8001836:	bd70      	pop	{r4, r5, r6, pc}
 8001838:	f855 3b04 	ldr.w	r3, [r5], #4
 800183c:	4798      	blx	r3
 800183e:	3601      	adds	r6, #1
 8001840:	e7ee      	b.n	8001820 <__libc_init_array+0xc>
 8001842:	f855 3b04 	ldr.w	r3, [r5], #4
 8001846:	4798      	blx	r3
 8001848:	3601      	adds	r6, #1
 800184a:	e7f2      	b.n	8001832 <__libc_init_array+0x1e>
 800184c:	08002184 	.word	0x08002184
 8001850:	08002184 	.word	0x08002184
 8001854:	08002184 	.word	0x08002184
 8001858:	08002188 	.word	0x08002188

0800185c <memset>:
 800185c:	4603      	mov	r3, r0
 800185e:	4402      	add	r2, r0
 8001860:	4293      	cmp	r3, r2
 8001862:	d100      	bne.n	8001866 <memset+0xa>
 8001864:	4770      	bx	lr
 8001866:	f803 1b01 	strb.w	r1, [r3], #1
 800186a:	e7f9      	b.n	8001860 <memset+0x4>

0800186c <sniprintf>:
 800186c:	b40c      	push	{r2, r3}
 800186e:	b530      	push	{r4, r5, lr}
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <sniprintf+0x64>)
 8001872:	1e0c      	subs	r4, r1, #0
 8001874:	681d      	ldr	r5, [r3, #0]
 8001876:	b09d      	sub	sp, #116	; 0x74
 8001878:	da08      	bge.n	800188c <sniprintf+0x20>
 800187a:	238b      	movs	r3, #139	; 0x8b
 800187c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001880:	602b      	str	r3, [r5, #0]
 8001882:	b01d      	add	sp, #116	; 0x74
 8001884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001888:	b002      	add	sp, #8
 800188a:	4770      	bx	lr
 800188c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001890:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001894:	bf0c      	ite	eq
 8001896:	4623      	moveq	r3, r4
 8001898:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800189c:	9304      	str	r3, [sp, #16]
 800189e:	9307      	str	r3, [sp, #28]
 80018a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a4:	9002      	str	r0, [sp, #8]
 80018a6:	9006      	str	r0, [sp, #24]
 80018a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80018ac:	4628      	mov	r0, r5
 80018ae:	ab21      	add	r3, sp, #132	; 0x84
 80018b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80018b2:	a902      	add	r1, sp, #8
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	f000 f869 	bl	800198c <_svfiprintf_r>
 80018ba:	1c43      	adds	r3, r0, #1
 80018bc:	bfbc      	itt	lt
 80018be:	238b      	movlt	r3, #139	; 0x8b
 80018c0:	602b      	strlt	r3, [r5, #0]
 80018c2:	2c00      	cmp	r4, #0
 80018c4:	d0dd      	beq.n	8001882 <sniprintf+0x16>
 80018c6:	2200      	movs	r2, #0
 80018c8:	9b02      	ldr	r3, [sp, #8]
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	e7d9      	b.n	8001882 <sniprintf+0x16>
 80018ce:	bf00      	nop
 80018d0:	2000000c 	.word	0x2000000c

080018d4 <__ssputs_r>:
 80018d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018d8:	688e      	ldr	r6, [r1, #8]
 80018da:	4682      	mov	sl, r0
 80018dc:	429e      	cmp	r6, r3
 80018de:	460c      	mov	r4, r1
 80018e0:	4690      	mov	r8, r2
 80018e2:	461f      	mov	r7, r3
 80018e4:	d838      	bhi.n	8001958 <__ssputs_r+0x84>
 80018e6:	898a      	ldrh	r2, [r1, #12]
 80018e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80018ec:	d032      	beq.n	8001954 <__ssputs_r+0x80>
 80018ee:	6825      	ldr	r5, [r4, #0]
 80018f0:	6909      	ldr	r1, [r1, #16]
 80018f2:	3301      	adds	r3, #1
 80018f4:	eba5 0901 	sub.w	r9, r5, r1
 80018f8:	6965      	ldr	r5, [r4, #20]
 80018fa:	444b      	add	r3, r9
 80018fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001900:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001904:	106d      	asrs	r5, r5, #1
 8001906:	429d      	cmp	r5, r3
 8001908:	bf38      	it	cc
 800190a:	461d      	movcc	r5, r3
 800190c:	0553      	lsls	r3, r2, #21
 800190e:	d531      	bpl.n	8001974 <__ssputs_r+0xa0>
 8001910:	4629      	mov	r1, r5
 8001912:	f000 fb53 	bl	8001fbc <_malloc_r>
 8001916:	4606      	mov	r6, r0
 8001918:	b950      	cbnz	r0, 8001930 <__ssputs_r+0x5c>
 800191a:	230c      	movs	r3, #12
 800191c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001920:	f8ca 3000 	str.w	r3, [sl]
 8001924:	89a3      	ldrh	r3, [r4, #12]
 8001926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800192a:	81a3      	strh	r3, [r4, #12]
 800192c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001930:	464a      	mov	r2, r9
 8001932:	6921      	ldr	r1, [r4, #16]
 8001934:	f000 face 	bl	8001ed4 <memcpy>
 8001938:	89a3      	ldrh	r3, [r4, #12]
 800193a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800193e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001942:	81a3      	strh	r3, [r4, #12]
 8001944:	6126      	str	r6, [r4, #16]
 8001946:	444e      	add	r6, r9
 8001948:	6026      	str	r6, [r4, #0]
 800194a:	463e      	mov	r6, r7
 800194c:	6165      	str	r5, [r4, #20]
 800194e:	eba5 0509 	sub.w	r5, r5, r9
 8001952:	60a5      	str	r5, [r4, #8]
 8001954:	42be      	cmp	r6, r7
 8001956:	d900      	bls.n	800195a <__ssputs_r+0x86>
 8001958:	463e      	mov	r6, r7
 800195a:	4632      	mov	r2, r6
 800195c:	4641      	mov	r1, r8
 800195e:	6820      	ldr	r0, [r4, #0]
 8001960:	f000 fac6 	bl	8001ef0 <memmove>
 8001964:	68a3      	ldr	r3, [r4, #8]
 8001966:	6822      	ldr	r2, [r4, #0]
 8001968:	1b9b      	subs	r3, r3, r6
 800196a:	4432      	add	r2, r6
 800196c:	2000      	movs	r0, #0
 800196e:	60a3      	str	r3, [r4, #8]
 8001970:	6022      	str	r2, [r4, #0]
 8001972:	e7db      	b.n	800192c <__ssputs_r+0x58>
 8001974:	462a      	mov	r2, r5
 8001976:	f000 fb7b 	bl	8002070 <_realloc_r>
 800197a:	4606      	mov	r6, r0
 800197c:	2800      	cmp	r0, #0
 800197e:	d1e1      	bne.n	8001944 <__ssputs_r+0x70>
 8001980:	4650      	mov	r0, sl
 8001982:	6921      	ldr	r1, [r4, #16]
 8001984:	f000 face 	bl	8001f24 <_free_r>
 8001988:	e7c7      	b.n	800191a <__ssputs_r+0x46>
	...

0800198c <_svfiprintf_r>:
 800198c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001990:	4698      	mov	r8, r3
 8001992:	898b      	ldrh	r3, [r1, #12]
 8001994:	4607      	mov	r7, r0
 8001996:	061b      	lsls	r3, r3, #24
 8001998:	460d      	mov	r5, r1
 800199a:	4614      	mov	r4, r2
 800199c:	b09d      	sub	sp, #116	; 0x74
 800199e:	d50e      	bpl.n	80019be <_svfiprintf_r+0x32>
 80019a0:	690b      	ldr	r3, [r1, #16]
 80019a2:	b963      	cbnz	r3, 80019be <_svfiprintf_r+0x32>
 80019a4:	2140      	movs	r1, #64	; 0x40
 80019a6:	f000 fb09 	bl	8001fbc <_malloc_r>
 80019aa:	6028      	str	r0, [r5, #0]
 80019ac:	6128      	str	r0, [r5, #16]
 80019ae:	b920      	cbnz	r0, 80019ba <_svfiprintf_r+0x2e>
 80019b0:	230c      	movs	r3, #12
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019b8:	e0d1      	b.n	8001b5e <_svfiprintf_r+0x1d2>
 80019ba:	2340      	movs	r3, #64	; 0x40
 80019bc:	616b      	str	r3, [r5, #20]
 80019be:	2300      	movs	r3, #0
 80019c0:	9309      	str	r3, [sp, #36]	; 0x24
 80019c2:	2320      	movs	r3, #32
 80019c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019c8:	2330      	movs	r3, #48	; 0x30
 80019ca:	f04f 0901 	mov.w	r9, #1
 80019ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80019d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001b78 <_svfiprintf_r+0x1ec>
 80019d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019da:	4623      	mov	r3, r4
 80019dc:	469a      	mov	sl, r3
 80019de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019e2:	b10a      	cbz	r2, 80019e8 <_svfiprintf_r+0x5c>
 80019e4:	2a25      	cmp	r2, #37	; 0x25
 80019e6:	d1f9      	bne.n	80019dc <_svfiprintf_r+0x50>
 80019e8:	ebba 0b04 	subs.w	fp, sl, r4
 80019ec:	d00b      	beq.n	8001a06 <_svfiprintf_r+0x7a>
 80019ee:	465b      	mov	r3, fp
 80019f0:	4622      	mov	r2, r4
 80019f2:	4629      	mov	r1, r5
 80019f4:	4638      	mov	r0, r7
 80019f6:	f7ff ff6d 	bl	80018d4 <__ssputs_r>
 80019fa:	3001      	adds	r0, #1
 80019fc:	f000 80aa 	beq.w	8001b54 <_svfiprintf_r+0x1c8>
 8001a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a02:	445a      	add	r2, fp
 8001a04:	9209      	str	r2, [sp, #36]	; 0x24
 8001a06:	f89a 3000 	ldrb.w	r3, [sl]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80a2 	beq.w	8001b54 <_svfiprintf_r+0x1c8>
 8001a10:	2300      	movs	r3, #0
 8001a12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a1a:	f10a 0a01 	add.w	sl, sl, #1
 8001a1e:	9304      	str	r3, [sp, #16]
 8001a20:	9307      	str	r3, [sp, #28]
 8001a22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a26:	931a      	str	r3, [sp, #104]	; 0x68
 8001a28:	4654      	mov	r4, sl
 8001a2a:	2205      	movs	r2, #5
 8001a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a30:	4851      	ldr	r0, [pc, #324]	; (8001b78 <_svfiprintf_r+0x1ec>)
 8001a32:	f000 fa41 	bl	8001eb8 <memchr>
 8001a36:	9a04      	ldr	r2, [sp, #16]
 8001a38:	b9d8      	cbnz	r0, 8001a72 <_svfiprintf_r+0xe6>
 8001a3a:	06d0      	lsls	r0, r2, #27
 8001a3c:	bf44      	itt	mi
 8001a3e:	2320      	movmi	r3, #32
 8001a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a44:	0711      	lsls	r1, r2, #28
 8001a46:	bf44      	itt	mi
 8001a48:	232b      	movmi	r3, #43	; 0x2b
 8001a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8001a52:	2b2a      	cmp	r3, #42	; 0x2a
 8001a54:	d015      	beq.n	8001a82 <_svfiprintf_r+0xf6>
 8001a56:	4654      	mov	r4, sl
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f04f 0c0a 	mov.w	ip, #10
 8001a5e:	9a07      	ldr	r2, [sp, #28]
 8001a60:	4621      	mov	r1, r4
 8001a62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a66:	3b30      	subs	r3, #48	; 0x30
 8001a68:	2b09      	cmp	r3, #9
 8001a6a:	d94e      	bls.n	8001b0a <_svfiprintf_r+0x17e>
 8001a6c:	b1b0      	cbz	r0, 8001a9c <_svfiprintf_r+0x110>
 8001a6e:	9207      	str	r2, [sp, #28]
 8001a70:	e014      	b.n	8001a9c <_svfiprintf_r+0x110>
 8001a72:	eba0 0308 	sub.w	r3, r0, r8
 8001a76:	fa09 f303 	lsl.w	r3, r9, r3
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	46a2      	mov	sl, r4
 8001a7e:	9304      	str	r3, [sp, #16]
 8001a80:	e7d2      	b.n	8001a28 <_svfiprintf_r+0x9c>
 8001a82:	9b03      	ldr	r3, [sp, #12]
 8001a84:	1d19      	adds	r1, r3, #4
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	9103      	str	r1, [sp, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bfbb      	ittet	lt
 8001a8e:	425b      	neglt	r3, r3
 8001a90:	f042 0202 	orrlt.w	r2, r2, #2
 8001a94:	9307      	strge	r3, [sp, #28]
 8001a96:	9307      	strlt	r3, [sp, #28]
 8001a98:	bfb8      	it	lt
 8001a9a:	9204      	strlt	r2, [sp, #16]
 8001a9c:	7823      	ldrb	r3, [r4, #0]
 8001a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8001aa0:	d10c      	bne.n	8001abc <_svfiprintf_r+0x130>
 8001aa2:	7863      	ldrb	r3, [r4, #1]
 8001aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8001aa6:	d135      	bne.n	8001b14 <_svfiprintf_r+0x188>
 8001aa8:	9b03      	ldr	r3, [sp, #12]
 8001aaa:	3402      	adds	r4, #2
 8001aac:	1d1a      	adds	r2, r3, #4
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	9203      	str	r2, [sp, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bfb8      	it	lt
 8001ab6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001aba:	9305      	str	r3, [sp, #20]
 8001abc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001b88 <_svfiprintf_r+0x1fc>
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	4650      	mov	r0, sl
 8001ac4:	7821      	ldrb	r1, [r4, #0]
 8001ac6:	f000 f9f7 	bl	8001eb8 <memchr>
 8001aca:	b140      	cbz	r0, 8001ade <_svfiprintf_r+0x152>
 8001acc:	2340      	movs	r3, #64	; 0x40
 8001ace:	eba0 000a 	sub.w	r0, r0, sl
 8001ad2:	fa03 f000 	lsl.w	r0, r3, r0
 8001ad6:	9b04      	ldr	r3, [sp, #16]
 8001ad8:	3401      	adds	r4, #1
 8001ada:	4303      	orrs	r3, r0
 8001adc:	9304      	str	r3, [sp, #16]
 8001ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ae2:	2206      	movs	r2, #6
 8001ae4:	4825      	ldr	r0, [pc, #148]	; (8001b7c <_svfiprintf_r+0x1f0>)
 8001ae6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001aea:	f000 f9e5 	bl	8001eb8 <memchr>
 8001aee:	2800      	cmp	r0, #0
 8001af0:	d038      	beq.n	8001b64 <_svfiprintf_r+0x1d8>
 8001af2:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <_svfiprintf_r+0x1f4>)
 8001af4:	bb1b      	cbnz	r3, 8001b3e <_svfiprintf_r+0x1b2>
 8001af6:	9b03      	ldr	r3, [sp, #12]
 8001af8:	3307      	adds	r3, #7
 8001afa:	f023 0307 	bic.w	r3, r3, #7
 8001afe:	3308      	adds	r3, #8
 8001b00:	9303      	str	r3, [sp, #12]
 8001b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b04:	4433      	add	r3, r6
 8001b06:	9309      	str	r3, [sp, #36]	; 0x24
 8001b08:	e767      	b.n	80019da <_svfiprintf_r+0x4e>
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b12:	e7a5      	b.n	8001a60 <_svfiprintf_r+0xd4>
 8001b14:	2300      	movs	r3, #0
 8001b16:	f04f 0c0a 	mov.w	ip, #10
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	3401      	adds	r4, #1
 8001b1e:	9305      	str	r3, [sp, #20]
 8001b20:	4620      	mov	r0, r4
 8001b22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b26:	3a30      	subs	r2, #48	; 0x30
 8001b28:	2a09      	cmp	r2, #9
 8001b2a:	d903      	bls.n	8001b34 <_svfiprintf_r+0x1a8>
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0c5      	beq.n	8001abc <_svfiprintf_r+0x130>
 8001b30:	9105      	str	r1, [sp, #20]
 8001b32:	e7c3      	b.n	8001abc <_svfiprintf_r+0x130>
 8001b34:	4604      	mov	r4, r0
 8001b36:	2301      	movs	r3, #1
 8001b38:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b3c:	e7f0      	b.n	8001b20 <_svfiprintf_r+0x194>
 8001b3e:	ab03      	add	r3, sp, #12
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	462a      	mov	r2, r5
 8001b44:	4638      	mov	r0, r7
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <_svfiprintf_r+0x1f8>)
 8001b48:	a904      	add	r1, sp, #16
 8001b4a:	f3af 8000 	nop.w
 8001b4e:	1c42      	adds	r2, r0, #1
 8001b50:	4606      	mov	r6, r0
 8001b52:	d1d6      	bne.n	8001b02 <_svfiprintf_r+0x176>
 8001b54:	89ab      	ldrh	r3, [r5, #12]
 8001b56:	065b      	lsls	r3, r3, #25
 8001b58:	f53f af2c 	bmi.w	80019b4 <_svfiprintf_r+0x28>
 8001b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b5e:	b01d      	add	sp, #116	; 0x74
 8001b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b64:	ab03      	add	r3, sp, #12
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	462a      	mov	r2, r5
 8001b6a:	4638      	mov	r0, r7
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <_svfiprintf_r+0x1f8>)
 8001b6e:	a904      	add	r1, sp, #16
 8001b70:	f000 f87c 	bl	8001c6c <_printf_i>
 8001b74:	e7eb      	b.n	8001b4e <_svfiprintf_r+0x1c2>
 8001b76:	bf00      	nop
 8001b78:	08002151 	.word	0x08002151
 8001b7c:	0800215b 	.word	0x0800215b
 8001b80:	00000000 	.word	0x00000000
 8001b84:	080018d5 	.word	0x080018d5
 8001b88:	08002157 	.word	0x08002157

08001b8c <_printf_common>:
 8001b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b90:	4616      	mov	r6, r2
 8001b92:	4699      	mov	r9, r3
 8001b94:	688a      	ldr	r2, [r1, #8]
 8001b96:	690b      	ldr	r3, [r1, #16]
 8001b98:	4607      	mov	r7, r0
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	bfb8      	it	lt
 8001b9e:	4613      	movlt	r3, r2
 8001ba0:	6033      	str	r3, [r6, #0]
 8001ba2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001bac:	b10a      	cbz	r2, 8001bb2 <_printf_common+0x26>
 8001bae:	3301      	adds	r3, #1
 8001bb0:	6033      	str	r3, [r6, #0]
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	0699      	lsls	r1, r3, #26
 8001bb6:	bf42      	ittt	mi
 8001bb8:	6833      	ldrmi	r3, [r6, #0]
 8001bba:	3302      	addmi	r3, #2
 8001bbc:	6033      	strmi	r3, [r6, #0]
 8001bbe:	6825      	ldr	r5, [r4, #0]
 8001bc0:	f015 0506 	ands.w	r5, r5, #6
 8001bc4:	d106      	bne.n	8001bd4 <_printf_common+0x48>
 8001bc6:	f104 0a19 	add.w	sl, r4, #25
 8001bca:	68e3      	ldr	r3, [r4, #12]
 8001bcc:	6832      	ldr	r2, [r6, #0]
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	42ab      	cmp	r3, r5
 8001bd2:	dc28      	bgt.n	8001c26 <_printf_common+0x9a>
 8001bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001bd8:	1e13      	subs	r3, r2, #0
 8001bda:	6822      	ldr	r2, [r4, #0]
 8001bdc:	bf18      	it	ne
 8001bde:	2301      	movne	r3, #1
 8001be0:	0692      	lsls	r2, r2, #26
 8001be2:	d42d      	bmi.n	8001c40 <_printf_common+0xb4>
 8001be4:	4649      	mov	r1, r9
 8001be6:	4638      	mov	r0, r7
 8001be8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001bec:	47c0      	blx	r8
 8001bee:	3001      	adds	r0, #1
 8001bf0:	d020      	beq.n	8001c34 <_printf_common+0xa8>
 8001bf2:	6823      	ldr	r3, [r4, #0]
 8001bf4:	68e5      	ldr	r5, [r4, #12]
 8001bf6:	f003 0306 	and.w	r3, r3, #6
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	bf18      	it	ne
 8001bfe:	2500      	movne	r5, #0
 8001c00:	6832      	ldr	r2, [r6, #0]
 8001c02:	f04f 0600 	mov.w	r6, #0
 8001c06:	68a3      	ldr	r3, [r4, #8]
 8001c08:	bf08      	it	eq
 8001c0a:	1aad      	subeq	r5, r5, r2
 8001c0c:	6922      	ldr	r2, [r4, #16]
 8001c0e:	bf08      	it	eq
 8001c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c14:	4293      	cmp	r3, r2
 8001c16:	bfc4      	itt	gt
 8001c18:	1a9b      	subgt	r3, r3, r2
 8001c1a:	18ed      	addgt	r5, r5, r3
 8001c1c:	341a      	adds	r4, #26
 8001c1e:	42b5      	cmp	r5, r6
 8001c20:	d11a      	bne.n	8001c58 <_printf_common+0xcc>
 8001c22:	2000      	movs	r0, #0
 8001c24:	e008      	b.n	8001c38 <_printf_common+0xac>
 8001c26:	2301      	movs	r3, #1
 8001c28:	4652      	mov	r2, sl
 8001c2a:	4649      	mov	r1, r9
 8001c2c:	4638      	mov	r0, r7
 8001c2e:	47c0      	blx	r8
 8001c30:	3001      	adds	r0, #1
 8001c32:	d103      	bne.n	8001c3c <_printf_common+0xb0>
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c3c:	3501      	adds	r5, #1
 8001c3e:	e7c4      	b.n	8001bca <_printf_common+0x3e>
 8001c40:	2030      	movs	r0, #48	; 0x30
 8001c42:	18e1      	adds	r1, r4, r3
 8001c44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c4e:	4422      	add	r2, r4
 8001c50:	3302      	adds	r3, #2
 8001c52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c56:	e7c5      	b.n	8001be4 <_printf_common+0x58>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	4649      	mov	r1, r9
 8001c5e:	4638      	mov	r0, r7
 8001c60:	47c0      	blx	r8
 8001c62:	3001      	adds	r0, #1
 8001c64:	d0e6      	beq.n	8001c34 <_printf_common+0xa8>
 8001c66:	3601      	adds	r6, #1
 8001c68:	e7d9      	b.n	8001c1e <_printf_common+0x92>
	...

08001c6c <_printf_i>:
 8001c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c70:	460c      	mov	r4, r1
 8001c72:	7e27      	ldrb	r7, [r4, #24]
 8001c74:	4691      	mov	r9, r2
 8001c76:	2f78      	cmp	r7, #120	; 0x78
 8001c78:	4680      	mov	r8, r0
 8001c7a:	469a      	mov	sl, r3
 8001c7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001c7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c82:	d807      	bhi.n	8001c94 <_printf_i+0x28>
 8001c84:	2f62      	cmp	r7, #98	; 0x62
 8001c86:	d80a      	bhi.n	8001c9e <_printf_i+0x32>
 8001c88:	2f00      	cmp	r7, #0
 8001c8a:	f000 80d9 	beq.w	8001e40 <_printf_i+0x1d4>
 8001c8e:	2f58      	cmp	r7, #88	; 0x58
 8001c90:	f000 80a4 	beq.w	8001ddc <_printf_i+0x170>
 8001c94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001c98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001c9c:	e03a      	b.n	8001d14 <_printf_i+0xa8>
 8001c9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001ca2:	2b15      	cmp	r3, #21
 8001ca4:	d8f6      	bhi.n	8001c94 <_printf_i+0x28>
 8001ca6:	a001      	add	r0, pc, #4	; (adr r0, 8001cac <_printf_i+0x40>)
 8001ca8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001cac:	08001d05 	.word	0x08001d05
 8001cb0:	08001d19 	.word	0x08001d19
 8001cb4:	08001c95 	.word	0x08001c95
 8001cb8:	08001c95 	.word	0x08001c95
 8001cbc:	08001c95 	.word	0x08001c95
 8001cc0:	08001c95 	.word	0x08001c95
 8001cc4:	08001d19 	.word	0x08001d19
 8001cc8:	08001c95 	.word	0x08001c95
 8001ccc:	08001c95 	.word	0x08001c95
 8001cd0:	08001c95 	.word	0x08001c95
 8001cd4:	08001c95 	.word	0x08001c95
 8001cd8:	08001e27 	.word	0x08001e27
 8001cdc:	08001d49 	.word	0x08001d49
 8001ce0:	08001e09 	.word	0x08001e09
 8001ce4:	08001c95 	.word	0x08001c95
 8001ce8:	08001c95 	.word	0x08001c95
 8001cec:	08001e49 	.word	0x08001e49
 8001cf0:	08001c95 	.word	0x08001c95
 8001cf4:	08001d49 	.word	0x08001d49
 8001cf8:	08001c95 	.word	0x08001c95
 8001cfc:	08001c95 	.word	0x08001c95
 8001d00:	08001e11 	.word	0x08001e11
 8001d04:	680b      	ldr	r3, [r1, #0]
 8001d06:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001d0a:	1d1a      	adds	r2, r3, #4
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	600a      	str	r2, [r1, #0]
 8001d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0a4      	b.n	8001e62 <_printf_i+0x1f6>
 8001d18:	6825      	ldr	r5, [r4, #0]
 8001d1a:	6808      	ldr	r0, [r1, #0]
 8001d1c:	062e      	lsls	r6, r5, #24
 8001d1e:	f100 0304 	add.w	r3, r0, #4
 8001d22:	d50a      	bpl.n	8001d3a <_printf_i+0xce>
 8001d24:	6805      	ldr	r5, [r0, #0]
 8001d26:	600b      	str	r3, [r1, #0]
 8001d28:	2d00      	cmp	r5, #0
 8001d2a:	da03      	bge.n	8001d34 <_printf_i+0xc8>
 8001d2c:	232d      	movs	r3, #45	; 0x2d
 8001d2e:	426d      	negs	r5, r5
 8001d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d34:	230a      	movs	r3, #10
 8001d36:	485e      	ldr	r0, [pc, #376]	; (8001eb0 <_printf_i+0x244>)
 8001d38:	e019      	b.n	8001d6e <_printf_i+0x102>
 8001d3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001d3e:	6805      	ldr	r5, [r0, #0]
 8001d40:	600b      	str	r3, [r1, #0]
 8001d42:	bf18      	it	ne
 8001d44:	b22d      	sxthne	r5, r5
 8001d46:	e7ef      	b.n	8001d28 <_printf_i+0xbc>
 8001d48:	680b      	ldr	r3, [r1, #0]
 8001d4a:	6825      	ldr	r5, [r4, #0]
 8001d4c:	1d18      	adds	r0, r3, #4
 8001d4e:	6008      	str	r0, [r1, #0]
 8001d50:	0628      	lsls	r0, r5, #24
 8001d52:	d501      	bpl.n	8001d58 <_printf_i+0xec>
 8001d54:	681d      	ldr	r5, [r3, #0]
 8001d56:	e002      	b.n	8001d5e <_printf_i+0xf2>
 8001d58:	0669      	lsls	r1, r5, #25
 8001d5a:	d5fb      	bpl.n	8001d54 <_printf_i+0xe8>
 8001d5c:	881d      	ldrh	r5, [r3, #0]
 8001d5e:	2f6f      	cmp	r7, #111	; 0x6f
 8001d60:	bf0c      	ite	eq
 8001d62:	2308      	moveq	r3, #8
 8001d64:	230a      	movne	r3, #10
 8001d66:	4852      	ldr	r0, [pc, #328]	; (8001eb0 <_printf_i+0x244>)
 8001d68:	2100      	movs	r1, #0
 8001d6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d6e:	6866      	ldr	r6, [r4, #4]
 8001d70:	2e00      	cmp	r6, #0
 8001d72:	bfa8      	it	ge
 8001d74:	6821      	ldrge	r1, [r4, #0]
 8001d76:	60a6      	str	r6, [r4, #8]
 8001d78:	bfa4      	itt	ge
 8001d7a:	f021 0104 	bicge.w	r1, r1, #4
 8001d7e:	6021      	strge	r1, [r4, #0]
 8001d80:	b90d      	cbnz	r5, 8001d86 <_printf_i+0x11a>
 8001d82:	2e00      	cmp	r6, #0
 8001d84:	d04d      	beq.n	8001e22 <_printf_i+0x1b6>
 8001d86:	4616      	mov	r6, r2
 8001d88:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d8c:	fb03 5711 	mls	r7, r3, r1, r5
 8001d90:	5dc7      	ldrb	r7, [r0, r7]
 8001d92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d96:	462f      	mov	r7, r5
 8001d98:	42bb      	cmp	r3, r7
 8001d9a:	460d      	mov	r5, r1
 8001d9c:	d9f4      	bls.n	8001d88 <_printf_i+0x11c>
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d10b      	bne.n	8001dba <_printf_i+0x14e>
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	07df      	lsls	r7, r3, #31
 8001da6:	d508      	bpl.n	8001dba <_printf_i+0x14e>
 8001da8:	6923      	ldr	r3, [r4, #16]
 8001daa:	6861      	ldr	r1, [r4, #4]
 8001dac:	4299      	cmp	r1, r3
 8001dae:	bfde      	ittt	le
 8001db0:	2330      	movle	r3, #48	; 0x30
 8001db2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001db6:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8001dba:	1b92      	subs	r2, r2, r6
 8001dbc:	6122      	str	r2, [r4, #16]
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	4640      	mov	r0, r8
 8001dc4:	f8cd a000 	str.w	sl, [sp]
 8001dc8:	aa03      	add	r2, sp, #12
 8001dca:	f7ff fedf 	bl	8001b8c <_printf_common>
 8001dce:	3001      	adds	r0, #1
 8001dd0:	d14c      	bne.n	8001e6c <_printf_i+0x200>
 8001dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dd6:	b004      	add	sp, #16
 8001dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ddc:	4834      	ldr	r0, [pc, #208]	; (8001eb0 <_printf_i+0x244>)
 8001dde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001de2:	680e      	ldr	r6, [r1, #0]
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	f856 5b04 	ldr.w	r5, [r6], #4
 8001dea:	061f      	lsls	r7, r3, #24
 8001dec:	600e      	str	r6, [r1, #0]
 8001dee:	d514      	bpl.n	8001e1a <_printf_i+0x1ae>
 8001df0:	07d9      	lsls	r1, r3, #31
 8001df2:	bf44      	itt	mi
 8001df4:	f043 0320 	orrmi.w	r3, r3, #32
 8001df8:	6023      	strmi	r3, [r4, #0]
 8001dfa:	b91d      	cbnz	r5, 8001e04 <_printf_i+0x198>
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	f023 0320 	bic.w	r3, r3, #32
 8001e02:	6023      	str	r3, [r4, #0]
 8001e04:	2310      	movs	r3, #16
 8001e06:	e7af      	b.n	8001d68 <_printf_i+0xfc>
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	f043 0320 	orr.w	r3, r3, #32
 8001e0e:	6023      	str	r3, [r4, #0]
 8001e10:	2378      	movs	r3, #120	; 0x78
 8001e12:	4828      	ldr	r0, [pc, #160]	; (8001eb4 <_printf_i+0x248>)
 8001e14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e18:	e7e3      	b.n	8001de2 <_printf_i+0x176>
 8001e1a:	065e      	lsls	r6, r3, #25
 8001e1c:	bf48      	it	mi
 8001e1e:	b2ad      	uxthmi	r5, r5
 8001e20:	e7e6      	b.n	8001df0 <_printf_i+0x184>
 8001e22:	4616      	mov	r6, r2
 8001e24:	e7bb      	b.n	8001d9e <_printf_i+0x132>
 8001e26:	680b      	ldr	r3, [r1, #0]
 8001e28:	6826      	ldr	r6, [r4, #0]
 8001e2a:	1d1d      	adds	r5, r3, #4
 8001e2c:	6960      	ldr	r0, [r4, #20]
 8001e2e:	600d      	str	r5, [r1, #0]
 8001e30:	0635      	lsls	r5, r6, #24
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	d501      	bpl.n	8001e3a <_printf_i+0x1ce>
 8001e36:	6018      	str	r0, [r3, #0]
 8001e38:	e002      	b.n	8001e40 <_printf_i+0x1d4>
 8001e3a:	0671      	lsls	r1, r6, #25
 8001e3c:	d5fb      	bpl.n	8001e36 <_printf_i+0x1ca>
 8001e3e:	8018      	strh	r0, [r3, #0]
 8001e40:	2300      	movs	r3, #0
 8001e42:	4616      	mov	r6, r2
 8001e44:	6123      	str	r3, [r4, #16]
 8001e46:	e7ba      	b.n	8001dbe <_printf_i+0x152>
 8001e48:	680b      	ldr	r3, [r1, #0]
 8001e4a:	1d1a      	adds	r2, r3, #4
 8001e4c:	600a      	str	r2, [r1, #0]
 8001e4e:	681e      	ldr	r6, [r3, #0]
 8001e50:	2100      	movs	r1, #0
 8001e52:	4630      	mov	r0, r6
 8001e54:	6862      	ldr	r2, [r4, #4]
 8001e56:	f000 f82f 	bl	8001eb8 <memchr>
 8001e5a:	b108      	cbz	r0, 8001e60 <_printf_i+0x1f4>
 8001e5c:	1b80      	subs	r0, r0, r6
 8001e5e:	6060      	str	r0, [r4, #4]
 8001e60:	6863      	ldr	r3, [r4, #4]
 8001e62:	6123      	str	r3, [r4, #16]
 8001e64:	2300      	movs	r3, #0
 8001e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e6a:	e7a8      	b.n	8001dbe <_printf_i+0x152>
 8001e6c:	4632      	mov	r2, r6
 8001e6e:	4649      	mov	r1, r9
 8001e70:	4640      	mov	r0, r8
 8001e72:	6923      	ldr	r3, [r4, #16]
 8001e74:	47d0      	blx	sl
 8001e76:	3001      	adds	r0, #1
 8001e78:	d0ab      	beq.n	8001dd2 <_printf_i+0x166>
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	079b      	lsls	r3, r3, #30
 8001e7e:	d413      	bmi.n	8001ea8 <_printf_i+0x23c>
 8001e80:	68e0      	ldr	r0, [r4, #12]
 8001e82:	9b03      	ldr	r3, [sp, #12]
 8001e84:	4298      	cmp	r0, r3
 8001e86:	bfb8      	it	lt
 8001e88:	4618      	movlt	r0, r3
 8001e8a:	e7a4      	b.n	8001dd6 <_printf_i+0x16a>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	4632      	mov	r2, r6
 8001e90:	4649      	mov	r1, r9
 8001e92:	4640      	mov	r0, r8
 8001e94:	47d0      	blx	sl
 8001e96:	3001      	adds	r0, #1
 8001e98:	d09b      	beq.n	8001dd2 <_printf_i+0x166>
 8001e9a:	3501      	adds	r5, #1
 8001e9c:	68e3      	ldr	r3, [r4, #12]
 8001e9e:	9903      	ldr	r1, [sp, #12]
 8001ea0:	1a5b      	subs	r3, r3, r1
 8001ea2:	42ab      	cmp	r3, r5
 8001ea4:	dcf2      	bgt.n	8001e8c <_printf_i+0x220>
 8001ea6:	e7eb      	b.n	8001e80 <_printf_i+0x214>
 8001ea8:	2500      	movs	r5, #0
 8001eaa:	f104 0619 	add.w	r6, r4, #25
 8001eae:	e7f5      	b.n	8001e9c <_printf_i+0x230>
 8001eb0:	08002162 	.word	0x08002162
 8001eb4:	08002173 	.word	0x08002173

08001eb8 <memchr>:
 8001eb8:	4603      	mov	r3, r0
 8001eba:	b510      	push	{r4, lr}
 8001ebc:	b2c9      	uxtb	r1, r1
 8001ebe:	4402      	add	r2, r0
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	d101      	bne.n	8001eca <memchr+0x12>
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	e003      	b.n	8001ed2 <memchr+0x1a>
 8001eca:	7804      	ldrb	r4, [r0, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	428c      	cmp	r4, r1
 8001ed0:	d1f6      	bne.n	8001ec0 <memchr+0x8>
 8001ed2:	bd10      	pop	{r4, pc}

08001ed4 <memcpy>:
 8001ed4:	440a      	add	r2, r1
 8001ed6:	4291      	cmp	r1, r2
 8001ed8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001edc:	d100      	bne.n	8001ee0 <memcpy+0xc>
 8001ede:	4770      	bx	lr
 8001ee0:	b510      	push	{r4, lr}
 8001ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ee6:	4291      	cmp	r1, r2
 8001ee8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001eec:	d1f9      	bne.n	8001ee2 <memcpy+0xe>
 8001eee:	bd10      	pop	{r4, pc}

08001ef0 <memmove>:
 8001ef0:	4288      	cmp	r0, r1
 8001ef2:	b510      	push	{r4, lr}
 8001ef4:	eb01 0402 	add.w	r4, r1, r2
 8001ef8:	d902      	bls.n	8001f00 <memmove+0x10>
 8001efa:	4284      	cmp	r4, r0
 8001efc:	4623      	mov	r3, r4
 8001efe:	d807      	bhi.n	8001f10 <memmove+0x20>
 8001f00:	1e43      	subs	r3, r0, #1
 8001f02:	42a1      	cmp	r1, r4
 8001f04:	d008      	beq.n	8001f18 <memmove+0x28>
 8001f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001f0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001f0e:	e7f8      	b.n	8001f02 <memmove+0x12>
 8001f10:	4601      	mov	r1, r0
 8001f12:	4402      	add	r2, r0
 8001f14:	428a      	cmp	r2, r1
 8001f16:	d100      	bne.n	8001f1a <memmove+0x2a>
 8001f18:	bd10      	pop	{r4, pc}
 8001f1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001f22:	e7f7      	b.n	8001f14 <memmove+0x24>

08001f24 <_free_r>:
 8001f24:	b538      	push	{r3, r4, r5, lr}
 8001f26:	4605      	mov	r5, r0
 8001f28:	2900      	cmp	r1, #0
 8001f2a:	d043      	beq.n	8001fb4 <_free_r+0x90>
 8001f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f30:	1f0c      	subs	r4, r1, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bfb8      	it	lt
 8001f36:	18e4      	addlt	r4, r4, r3
 8001f38:	f000 f8d0 	bl	80020dc <__malloc_lock>
 8001f3c:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <_free_r+0x94>)
 8001f3e:	6813      	ldr	r3, [r2, #0]
 8001f40:	4610      	mov	r0, r2
 8001f42:	b933      	cbnz	r3, 8001f52 <_free_r+0x2e>
 8001f44:	6063      	str	r3, [r4, #4]
 8001f46:	6014      	str	r4, [r2, #0]
 8001f48:	4628      	mov	r0, r5
 8001f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f4e:	f000 b8cb 	b.w	80020e8 <__malloc_unlock>
 8001f52:	42a3      	cmp	r3, r4
 8001f54:	d90a      	bls.n	8001f6c <_free_r+0x48>
 8001f56:	6821      	ldr	r1, [r4, #0]
 8001f58:	1862      	adds	r2, r4, r1
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	bf01      	itttt	eq
 8001f5e:	681a      	ldreq	r2, [r3, #0]
 8001f60:	685b      	ldreq	r3, [r3, #4]
 8001f62:	1852      	addeq	r2, r2, r1
 8001f64:	6022      	streq	r2, [r4, #0]
 8001f66:	6063      	str	r3, [r4, #4]
 8001f68:	6004      	str	r4, [r0, #0]
 8001f6a:	e7ed      	b.n	8001f48 <_free_r+0x24>
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	b10b      	cbz	r3, 8001f76 <_free_r+0x52>
 8001f72:	42a3      	cmp	r3, r4
 8001f74:	d9fa      	bls.n	8001f6c <_free_r+0x48>
 8001f76:	6811      	ldr	r1, [r2, #0]
 8001f78:	1850      	adds	r0, r2, r1
 8001f7a:	42a0      	cmp	r0, r4
 8001f7c:	d10b      	bne.n	8001f96 <_free_r+0x72>
 8001f7e:	6820      	ldr	r0, [r4, #0]
 8001f80:	4401      	add	r1, r0
 8001f82:	1850      	adds	r0, r2, r1
 8001f84:	4283      	cmp	r3, r0
 8001f86:	6011      	str	r1, [r2, #0]
 8001f88:	d1de      	bne.n	8001f48 <_free_r+0x24>
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4401      	add	r1, r0
 8001f90:	6011      	str	r1, [r2, #0]
 8001f92:	6053      	str	r3, [r2, #4]
 8001f94:	e7d8      	b.n	8001f48 <_free_r+0x24>
 8001f96:	d902      	bls.n	8001f9e <_free_r+0x7a>
 8001f98:	230c      	movs	r3, #12
 8001f9a:	602b      	str	r3, [r5, #0]
 8001f9c:	e7d4      	b.n	8001f48 <_free_r+0x24>
 8001f9e:	6820      	ldr	r0, [r4, #0]
 8001fa0:	1821      	adds	r1, r4, r0
 8001fa2:	428b      	cmp	r3, r1
 8001fa4:	bf01      	itttt	eq
 8001fa6:	6819      	ldreq	r1, [r3, #0]
 8001fa8:	685b      	ldreq	r3, [r3, #4]
 8001faa:	1809      	addeq	r1, r1, r0
 8001fac:	6021      	streq	r1, [r4, #0]
 8001fae:	6063      	str	r3, [r4, #4]
 8001fb0:	6054      	str	r4, [r2, #4]
 8001fb2:	e7c9      	b.n	8001f48 <_free_r+0x24>
 8001fb4:	bd38      	pop	{r3, r4, r5, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000114 	.word	0x20000114

08001fbc <_malloc_r>:
 8001fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fbe:	1ccd      	adds	r5, r1, #3
 8001fc0:	f025 0503 	bic.w	r5, r5, #3
 8001fc4:	3508      	adds	r5, #8
 8001fc6:	2d0c      	cmp	r5, #12
 8001fc8:	bf38      	it	cc
 8001fca:	250c      	movcc	r5, #12
 8001fcc:	2d00      	cmp	r5, #0
 8001fce:	4606      	mov	r6, r0
 8001fd0:	db01      	blt.n	8001fd6 <_malloc_r+0x1a>
 8001fd2:	42a9      	cmp	r1, r5
 8001fd4:	d903      	bls.n	8001fde <_malloc_r+0x22>
 8001fd6:	230c      	movs	r3, #12
 8001fd8:	6033      	str	r3, [r6, #0]
 8001fda:	2000      	movs	r0, #0
 8001fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fde:	f000 f87d 	bl	80020dc <__malloc_lock>
 8001fe2:	4921      	ldr	r1, [pc, #132]	; (8002068 <_malloc_r+0xac>)
 8001fe4:	680a      	ldr	r2, [r1, #0]
 8001fe6:	4614      	mov	r4, r2
 8001fe8:	b99c      	cbnz	r4, 8002012 <_malloc_r+0x56>
 8001fea:	4f20      	ldr	r7, [pc, #128]	; (800206c <_malloc_r+0xb0>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	b923      	cbnz	r3, 8001ffa <_malloc_r+0x3e>
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	4630      	mov	r0, r6
 8001ff4:	f000 f862 	bl	80020bc <_sbrk_r>
 8001ff8:	6038      	str	r0, [r7, #0]
 8001ffa:	4629      	mov	r1, r5
 8001ffc:	4630      	mov	r0, r6
 8001ffe:	f000 f85d 	bl	80020bc <_sbrk_r>
 8002002:	1c43      	adds	r3, r0, #1
 8002004:	d123      	bne.n	800204e <_malloc_r+0x92>
 8002006:	230c      	movs	r3, #12
 8002008:	4630      	mov	r0, r6
 800200a:	6033      	str	r3, [r6, #0]
 800200c:	f000 f86c 	bl	80020e8 <__malloc_unlock>
 8002010:	e7e3      	b.n	8001fda <_malloc_r+0x1e>
 8002012:	6823      	ldr	r3, [r4, #0]
 8002014:	1b5b      	subs	r3, r3, r5
 8002016:	d417      	bmi.n	8002048 <_malloc_r+0x8c>
 8002018:	2b0b      	cmp	r3, #11
 800201a:	d903      	bls.n	8002024 <_malloc_r+0x68>
 800201c:	6023      	str	r3, [r4, #0]
 800201e:	441c      	add	r4, r3
 8002020:	6025      	str	r5, [r4, #0]
 8002022:	e004      	b.n	800202e <_malloc_r+0x72>
 8002024:	6863      	ldr	r3, [r4, #4]
 8002026:	42a2      	cmp	r2, r4
 8002028:	bf0c      	ite	eq
 800202a:	600b      	streq	r3, [r1, #0]
 800202c:	6053      	strne	r3, [r2, #4]
 800202e:	4630      	mov	r0, r6
 8002030:	f000 f85a 	bl	80020e8 <__malloc_unlock>
 8002034:	f104 000b 	add.w	r0, r4, #11
 8002038:	1d23      	adds	r3, r4, #4
 800203a:	f020 0007 	bic.w	r0, r0, #7
 800203e:	1ac2      	subs	r2, r0, r3
 8002040:	d0cc      	beq.n	8001fdc <_malloc_r+0x20>
 8002042:	1a1b      	subs	r3, r3, r0
 8002044:	50a3      	str	r3, [r4, r2]
 8002046:	e7c9      	b.n	8001fdc <_malloc_r+0x20>
 8002048:	4622      	mov	r2, r4
 800204a:	6864      	ldr	r4, [r4, #4]
 800204c:	e7cc      	b.n	8001fe8 <_malloc_r+0x2c>
 800204e:	1cc4      	adds	r4, r0, #3
 8002050:	f024 0403 	bic.w	r4, r4, #3
 8002054:	42a0      	cmp	r0, r4
 8002056:	d0e3      	beq.n	8002020 <_malloc_r+0x64>
 8002058:	1a21      	subs	r1, r4, r0
 800205a:	4630      	mov	r0, r6
 800205c:	f000 f82e 	bl	80020bc <_sbrk_r>
 8002060:	3001      	adds	r0, #1
 8002062:	d1dd      	bne.n	8002020 <_malloc_r+0x64>
 8002064:	e7cf      	b.n	8002006 <_malloc_r+0x4a>
 8002066:	bf00      	nop
 8002068:	20000114 	.word	0x20000114
 800206c:	20000118 	.word	0x20000118

08002070 <_realloc_r>:
 8002070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002072:	4607      	mov	r7, r0
 8002074:	4614      	mov	r4, r2
 8002076:	460e      	mov	r6, r1
 8002078:	b921      	cbnz	r1, 8002084 <_realloc_r+0x14>
 800207a:	4611      	mov	r1, r2
 800207c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002080:	f7ff bf9c 	b.w	8001fbc <_malloc_r>
 8002084:	b922      	cbnz	r2, 8002090 <_realloc_r+0x20>
 8002086:	f7ff ff4d 	bl	8001f24 <_free_r>
 800208a:	4625      	mov	r5, r4
 800208c:	4628      	mov	r0, r5
 800208e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002090:	f000 f830 	bl	80020f4 <_malloc_usable_size_r>
 8002094:	42a0      	cmp	r0, r4
 8002096:	d20f      	bcs.n	80020b8 <_realloc_r+0x48>
 8002098:	4621      	mov	r1, r4
 800209a:	4638      	mov	r0, r7
 800209c:	f7ff ff8e 	bl	8001fbc <_malloc_r>
 80020a0:	4605      	mov	r5, r0
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d0f2      	beq.n	800208c <_realloc_r+0x1c>
 80020a6:	4631      	mov	r1, r6
 80020a8:	4622      	mov	r2, r4
 80020aa:	f7ff ff13 	bl	8001ed4 <memcpy>
 80020ae:	4631      	mov	r1, r6
 80020b0:	4638      	mov	r0, r7
 80020b2:	f7ff ff37 	bl	8001f24 <_free_r>
 80020b6:	e7e9      	b.n	800208c <_realloc_r+0x1c>
 80020b8:	4635      	mov	r5, r6
 80020ba:	e7e7      	b.n	800208c <_realloc_r+0x1c>

080020bc <_sbrk_r>:
 80020bc:	b538      	push	{r3, r4, r5, lr}
 80020be:	2300      	movs	r3, #0
 80020c0:	4d05      	ldr	r5, [pc, #20]	; (80020d8 <_sbrk_r+0x1c>)
 80020c2:	4604      	mov	r4, r0
 80020c4:	4608      	mov	r0, r1
 80020c6:	602b      	str	r3, [r5, #0]
 80020c8:	f7ff fb38 	bl	800173c <_sbrk>
 80020cc:	1c43      	adds	r3, r0, #1
 80020ce:	d102      	bne.n	80020d6 <_sbrk_r+0x1a>
 80020d0:	682b      	ldr	r3, [r5, #0]
 80020d2:	b103      	cbz	r3, 80020d6 <_sbrk_r+0x1a>
 80020d4:	6023      	str	r3, [r4, #0]
 80020d6:	bd38      	pop	{r3, r4, r5, pc}
 80020d8:	200001d8 	.word	0x200001d8

080020dc <__malloc_lock>:
 80020dc:	4801      	ldr	r0, [pc, #4]	; (80020e4 <__malloc_lock+0x8>)
 80020de:	f000 b811 	b.w	8002104 <__retarget_lock_acquire_recursive>
 80020e2:	bf00      	nop
 80020e4:	200001e0 	.word	0x200001e0

080020e8 <__malloc_unlock>:
 80020e8:	4801      	ldr	r0, [pc, #4]	; (80020f0 <__malloc_unlock+0x8>)
 80020ea:	f000 b80c 	b.w	8002106 <__retarget_lock_release_recursive>
 80020ee:	bf00      	nop
 80020f0:	200001e0 	.word	0x200001e0

080020f4 <_malloc_usable_size_r>:
 80020f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020f8:	1f18      	subs	r0, r3, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bfbc      	itt	lt
 80020fe:	580b      	ldrlt	r3, [r1, r0]
 8002100:	18c0      	addlt	r0, r0, r3
 8002102:	4770      	bx	lr

08002104 <__retarget_lock_acquire_recursive>:
 8002104:	4770      	bx	lr

08002106 <__retarget_lock_release_recursive>:
 8002106:	4770      	bx	lr

08002108 <_init>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	bf00      	nop
 800210c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210e:	bc08      	pop	{r3}
 8002110:	469e      	mov	lr, r3
 8002112:	4770      	bx	lr

08002114 <_fini>:
 8002114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002116:	bf00      	nop
 8002118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800211a:	bc08      	pop	{r3}
 800211c:	469e      	mov	lr, r3
 800211e:	4770      	bx	lr
